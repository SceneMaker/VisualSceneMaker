
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 07 14:28:31 CET 2018
//----------------------------------------------------

package de.dfki.vsm.model.sceneflow.glue;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.StringReader;
import de.dfki.vsm.util.log.*;
import de.dfki.vsm.model.sceneflow.glue.command.Command;
import de.dfki.vsm.model.sceneflow.glue.command.Definition;
import de.dfki.vsm.model.sceneflow.glue.command.Assignment;
import de.dfki.vsm.model.sceneflow.glue.command.Invocation;
import de.dfki.vsm.model.sceneflow.glue.command.Expression;
import de.dfki.vsm.model.sceneflow.glue.command.definition.FunctionDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.definition.VariableDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.definition.ArgumentDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.definition.DataTypeDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.definition.datatype.ListTypeDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.definition.datatype.StructTypeDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.definition.datatype.MemberDefinition;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.HistorySetDepth;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.HistoryClearFlat;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.HistoryClearDeep;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.PlayDialogAction;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.PlayScenesActivity;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.PlayActionActivity;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.StopActionActivity;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.UnblockSceneGroup;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.UnblockSceneScript;
import de.dfki.vsm.model.sceneflow.glue.command.expression.UnaryExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.BinaryExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.TernaryExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.CallingExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.ConstructExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.VariableExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.LiteralExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.ParenExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.literal.NullLiteral;
import de.dfki.vsm.model.sceneflow.glue.command.expression.literal.IntLiteral;
import de.dfki.vsm.model.sceneflow.glue.command.expression.literal.FloatLiteral;
import de.dfki.vsm.model.sceneflow.glue.command.expression.literal.BoolLiteral;
import de.dfki.vsm.model.sceneflow.glue.command.expression.literal.StringLiteral;
import de.dfki.vsm.model.sceneflow.glue.command.expression.record.ArrayExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.record.StructExpression;
import de.dfki.vsm.model.sceneflow.glue.command.expression.variable.SimpleVariable;
import de.dfki.vsm.model.sceneflow.glue.command.expression.variable.MemberVariable;
import de.dfki.vsm.model.sceneflow.glue.command.expression.variable.ArrayVariable;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.HistoryContains;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.HistoryRunTimeOf;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.HistoryValueOf;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.InStateQuery;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.PrologQuery;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.TimeoutQuery;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.RandomQuery;
import de.dfki.vsm.model.sceneflow.glue.command.expression.invocation.ContainsList;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.PlayActionActivity.PlayMode;
import de.dfki.vsm.model.sceneflow.glue.command.invocation.StopActionActivity.StopMode;
import de.dfki.vsm.model.sceneflow.glue.command.expression.UnaryExpression.UnaryOp;
import de.dfki.vsm.model.sceneflow.glue.command.expression.BinaryExpression.BinaryOp;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 07 14:28:31 CET 2018
  */
public class GlueParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GlueParser() {super();}

  /** Constructor which sets the default scanner. */
  public GlueParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GlueParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\012\003\000\002\012\003\000\002\014\010\000\002" +
    "\015\010\000\002\016\005\000\002\036\002\000\002\036" +
    "\003\000\002\036\005\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\010\006\000\002\041\003\000\002\041\003\000\002\007" +
    "\012\000\002\007\014\000\002\037\003\000\002\037\005" +
    "\000\002\011\005\000\002\042\003\000\002\042\005\000" +
    "\002\013\010\000\002\004\005\000\002\033\002\000\002" +
    "\033\003\000\002\032\003\000\002\032\005\000\002\003" +
    "\005\000\002\003\007\000\002\003\005\000\002\003\007" +
    "\000\002\003\006\000\002\003\010\000\002\003\005\000" +
    "\002\003\007\000\002\003\006\000\002\003\010\000\002" +
    "\003\006\000\002\003\010\000\002\003\006\000\002\003" +
    "\010\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\010\000\002\035\002\000" +
    "\002\035\003\000\002\034\003\000\002\034\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\021\011\000\002\022\003\000\002\022\003" +
    "\000\002\026\007\000\002\027\006\000\002\024\003\000" +
    "\002\024\006\000\002\024\005\000\002\031\005\000\002" +
    "\031\006\000\002\031\006\000\002\031\010\000\002\031" +
    "\006\000\002\031\010\000\002\031\012\000\002\031\012" +
    "\000\002\031\010\000\002\031\010\000\002\031\006\000" +
    "\002\030\005\000\002\030\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\130\004\007\005\020\006\063\007\051\010" +
    "\060\011\102\012\013\013\017\014\043\015\064\016\050" +
    "\017\052\020\004\021\101\022\045\023\065\030\053\032" +
    "\021\033\077\034\016\047\033\054\046\055\036\056\040" +
    "\057\074\060\023\062\057\064\062\073\026\074\006\075" +
    "\071\076\067\077\022\100\037\101\012\102\072\105\100" +
    "\106\106\107\076\110\005\111\105\112\035\113\061\001" +
    "\002\000\004\060\u0110\001\002\000\062\002\uff8a\031\uff8a" +
    "\032\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\052\uff8a\061\uff8a\063\uff8a\065\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\071\uff8a\001\002\000\010\061\uffef\066\uffef" +
    "\106\uffef\001\002\000\004\060\u010a\001\002\000\062\002" +
    "\uffbf\031\uffbf\032\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\061\uffbf\063\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\001\002\000\062\002" +
    "\uffbe\031\uffbe\032\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\061\uffbe\063\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000\010\061" +
    "\uffea\066\uffea\106\uffea\001\002\000\004\060\u0105\001\002" +
    "\000\062\002\uffb9\031\uffb9\032\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\061\uffb9\063" +
    "\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\001\002" +
    "\000\004\002\001\001\002\000\060\010\060\011\102\012" +
    "\013\017\052\020\004\022\045\023\065\030\053\034\016" +
    "\047\033\054\046\055\036\056\040\057\074\060\023\062" +
    "\057\064\062\106\120\107\076\110\005\111\105\112\035" +
    "\113\061\001\002\000\004\060\u0100\001\002\000\004\060" +
    "\372\001\002\000\060\010\060\011\102\012\013\017\052" +
    "\020\004\022\045\023\065\030\053\034\016\047\033\054" +
    "\046\055\036\056\040\057\074\060\023\062\057\064\062" +
    "\106\120\107\076\110\005\111\105\112\035\113\061\001" +
    "\002\000\010\061\uffec\066\uffec\106\uffec\001\002\000\060" +
    "\010\060\011\102\012\013\017\052\020\004\022\045\023" +
    "\065\030\053\034\016\047\033\054\046\055\036\056\040" +
    "\057\074\060\023\062\057\064\062\106\120\107\076\110" +
    "\005\111\105\112\035\113\061\001\002\000\062\002\uffbb" +
    "\031\uffbb\032\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\061\uffbb\063\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\001\002\000\004\002\ufffa" +
    "\001\002\000\010\061\ufff0\066\ufff0\106\ufff0\001\002\000" +
    "\004\002\ufff9\001\002\000\046\002\uffbc\031\uffbc\032\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\072\304\001\002\000\062\002\uffa1\031\uffa1\032" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\061\uffa1\063\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\071\uffa1\001\002\000\062\002\uffc0\031\uffc0\032" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\061\uffc0\063\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\001\002\000\060\010\060\011\102\012" +
    "\013\017\052\020\004\022\045\023\065\030\053\034\016" +
    "\047\033\054\046\055\036\056\040\057\074\060\023\062" +
    "\057\064\062\106\120\107\076\110\005\111\105\112\035" +
    "\113\061\001\002\000\004\002\354\001\002\000\062\002" +
    "\uff8d\031\uff8d\032\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\061\uff8d\063\uff8d\065\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\071\uff8d\001\002\000\060\010" +
    "\060\011\102\012\013\017\052\020\004\022\045\023\065" +
    "\030\053\034\016\047\033\054\046\055\036\056\040\057" +
    "\074\060\023\062\057\064\062\106\120\107\076\110\005" +
    "\111\105\112\035\113\061\001\002\000\010\061\uffeb\066" +
    "\uffeb\106\uffeb\001\002\000\004\106\255\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\ufff8\001\002\000\004\060" +
    "\347\001\002\000\044\002\ufffd\031\126\032\127\035\137" +
    "\036\133\037\134\040\141\041\131\042\130\043\123\044" +
    "\142\045\125\046\135\047\124\050\140\051\136\052\132" +
    "\001\002\000\004\060\341\001\002\000\060\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\062\057\064\062\106\120\107\076\110\005\111\105" +
    "\112\035\113\061\001\002\000\062\002\uffc1\031\uffc1\032" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\061\uffc1\063\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\001\002\000\004\060\335\001\002\000" +
    "\004\060\327\001\002\000\004\060\317\001\002\000\004" +
    "\106\313\001\002\000\062\002\uffba\031\uffba\032\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\061\uffba\063\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\001\002\000\004\002\ufffc\001\002\000\004\106" +
    "\uffe7\001\002\000\062\010\060\011\102\012\013\017\052" +
    "\020\004\022\045\023\065\030\053\034\016\047\033\054" +
    "\046\055\036\056\040\057\074\060\023\062\057\063\uffc5" +
    "\064\062\106\120\107\076\110\005\111\105\112\035\113" +
    "\061\001\002\000\004\060\306\001\002\000\062\002\uff8e" +
    "\031\uff8e\032\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\061\uff8e\063\uff8e\065\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\071\uff8e\001\002\000\006\065\uffdc" +
    "\106\255\001\002\000\004\060\267\001\002\000\004\060" +
    "\264\001\002\000\004\060\261\001\002\000\004\002\ufffe" +
    "\001\002\000\010\061\uffed\066\uffed\106\uffed\001\002\000" +
    "\062\002\uffa2\031\uffa2\032\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\061\uffa2\063\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\001\002\000" +
    "\010\061\uffee\066\uffee\106\uffee\001\002\000\010\061\uffe9" +
    "\066\uffe9\106\uffe9\001\002\000\004\106\256\001\002\000" +
    "\004\106\255\001\002\000\004\002\ufffb\001\002\000\062" +
    "\002\uff8b\031\uff8b\032\uff8b\035\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\047\uff8b\050\uff8b\051\uff8b\052\uff8b\061\uff8b\063\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\001\002\000\060" +
    "\010\060\011\102\012\013\017\052\020\004\022\045\023" +
    "\065\030\053\034\016\047\033\054\046\055\036\056\040" +
    "\057\074\060\023\062\057\064\062\106\120\107\076\110" +
    "\005\111\105\112\035\113\061\001\002\000\060\010\060" +
    "\011\102\012\013\017\052\020\004\022\045\023\065\030" +
    "\053\034\016\047\033\054\046\055\036\056\040\057\074" +
    "\060\023\062\057\064\062\106\120\107\076\110\005\111" +
    "\105\112\035\113\061\001\002\000\004\060\235\001\002" +
    "\000\004\060\232\001\002\000\062\002\uffbd\031\uffbd\032" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\061\uffbd\063\uffbd\065\uffbd\066\uffbd\067\uffbd" +
    "\070\uffbd\071\uffbd\001\002\000\004\002\ufff7\001\002\000" +
    "\062\002\uff8c\031\uff8c\032\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\061\uff8c\063\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\001\002\000" +
    "\060\002\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\060\111\062\107" +
    "\067\112\071\110\072\uff9e\106\uffe6\001\002\000\060\010" +
    "\060\011\102\012\013\017\052\020\004\022\045\023\065" +
    "\030\053\034\016\047\033\054\046\055\036\056\040\057" +
    "\074\060\023\062\057\064\062\106\120\107\076\110\005" +
    "\111\105\112\035\113\061\001\002\000\012\024\165\025" +
    "\166\026\167\027\164\001\002\000\062\010\060\011\102" +
    "\012\013\017\052\020\004\022\045\023\065\030\053\034" +
    "\016\047\033\054\046\055\036\056\040\057\074\060\023" +
    "\061\uffc5\062\057\064\062\106\120\107\076\110\005\111" +
    "\105\112\035\113\061\001\002\000\004\106\113\001\002" +
    "\000\064\002\uff9c\031\uff9c\032\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\061\uff9c\063" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c" +
    "\001\002\000\004\061\163\001\002\000\062\002\uffbc\031" +
    "\uffbc\032\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\061\uffbc\063\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\001\002\000\052\031\126\032" +
    "\127\035\137\036\133\037\134\040\141\041\131\042\130" +
    "\043\123\044\142\045\125\046\135\047\124\050\140\051" +
    "\136\052\132\061\uffc3\063\uffc3\066\uffc3\067\uffc3\001\002" +
    "\000\010\061\uffc4\063\uffc4\066\121\001\002\000\066\002" +
    "\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\060\111\061\uff9e\062\107" +
    "\063\uff9e\065\uff9e\066\uff9e\067\112\070\uff9e\071\uff9e\001" +
    "\002\000\060\010\060\011\102\012\013\017\052\020\004" +
    "\022\045\023\065\030\053\034\016\047\033\054\046\055" +
    "\036\056\040\057\074\060\023\062\057\064\062\106\120" +
    "\107\076\110\005\111\105\112\035\113\061\001\002\000" +
    "\052\031\126\032\127\035\137\036\133\037\134\040\141" +
    "\041\131\042\130\043\123\044\142\045\125\046\135\047" +
    "\124\050\140\051\136\052\132\061\uffc2\063\uffc2\066\uffc2" +
    "\067\uffc2\001\002\000\060\010\060\011\102\012\013\017" +
    "\052\020\004\022\045\023\065\030\053\034\016\047\033" +
    "\054\046\055\036\056\040\057\074\060\023\062\057\064" +
    "\062\106\120\107\076\110\005\111\105\112\035\113\061" +
    "\001\002\000\060\010\060\011\102\012\013\017\052\020" +
    "\004\022\045\023\065\030\053\034\016\047\033\054\046" +
    "\055\036\056\040\057\074\060\023\062\057\064\062\106" +
    "\120\107\076\110\005\111\105\112\035\113\061\001\002" +
    "\000\060\010\060\011\102\012\013\017\052\020\004\022" +
    "\045\023\065\030\053\034\016\047\033\054\046\055\036" +
    "\056\040\057\074\060\023\062\057\064\062\106\120\107" +
    "\076\110\005\111\105\112\035\113\061\001\002\000\060" +
    "\010\060\011\102\012\013\017\052\020\004\022\045\023" +
    "\065\030\053\034\016\047\033\054\046\055\036\056\040" +
    "\057\074\060\023\062\057\064\062\106\120\107\076\110" +
    "\005\111\105\112\035\113\061\001\002\000\060\010\060" +
    "\011\102\012\013\017\052\020\004\022\045\023\065\030" +
    "\053\034\016\047\033\054\046\055\036\056\040\057\074" +
    "\060\023\062\057\064\062\106\120\107\076\110\005\111" +
    "\105\112\035\113\061\001\002\000\060\010\060\011\102" +
    "\012\013\017\052\020\004\022\045\023\065\030\053\034" +
    "\016\047\033\054\046\055\036\056\040\057\074\060\023" +
    "\062\057\064\062\106\120\107\076\110\005\111\105\112" +
    "\035\113\061\001\002\000\060\010\060\011\102\012\013" +
    "\017\052\020\004\022\045\023\065\030\053\034\016\047" +
    "\033\054\046\055\036\056\040\057\074\060\023\062\057" +
    "\064\062\106\120\107\076\110\005\111\105\112\035\113" +
    "\061\001\002\000\060\010\060\011\102\012\013\017\052" +
    "\020\004\022\045\023\065\030\053\034\016\047\033\054" +
    "\046\055\036\056\040\057\074\060\023\062\057\064\062" +
    "\106\120\107\076\110\005\111\105\112\035\113\061\001" +
    "\002\000\060\010\060\011\102\012\013\017\052\020\004" +
    "\022\045\023\065\030\053\034\016\047\033\054\046\055" +
    "\036\056\040\057\074\060\023\062\057\064\062\106\120" +
    "\107\076\110\005\111\105\112\035\113\061\001\002\000" +
    "\060\010\060\011\102\012\013\017\052\020\004\022\045" +
    "\023\065\030\053\034\016\047\033\054\046\055\036\056" +
    "\040\057\074\060\023\062\057\064\062\106\120\107\076" +
    "\110\005\111\105\112\035\113\061\001\002\000\060\010" +
    "\060\011\102\012\013\017\052\020\004\022\045\023\065" +
    "\030\053\034\016\047\033\054\046\055\036\056\040\057" +
    "\074\060\023\062\057\064\062\106\120\107\076\110\005" +
    "\111\105\112\035\113\061\001\002\000\060\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\062\057\064\062\106\120\107\076\110\005\111\105" +
    "\112\035\113\061\001\002\000\060\010\060\011\102\012" +
    "\013\017\052\020\004\022\045\023\065\030\053\034\016" +
    "\047\033\054\046\055\036\056\040\057\074\060\023\062" +
    "\057\064\062\106\120\107\076\110\005\111\105\112\035" +
    "\113\061\001\002\000\060\010\060\011\102\012\013\017" +
    "\052\020\004\022\045\023\065\030\053\034\016\047\033" +
    "\054\046\055\036\056\040\057\074\060\023\062\057\064" +
    "\062\106\120\107\076\110\005\111\105\112\035\113\061" +
    "\001\002\000\060\010\060\011\102\012\013\017\052\020" +
    "\004\022\045\023\065\030\053\034\016\047\033\054\046" +
    "\055\036\056\040\057\074\060\023\062\057\064\062\106" +
    "\120\107\076\110\005\111\105\112\035\113\061\001\002" +
    "\000\060\010\060\011\102\012\013\017\052\020\004\022" +
    "\045\023\065\030\053\034\016\047\033\054\046\055\036" +
    "\056\040\057\074\060\023\062\057\064\062\106\120\107" +
    "\076\110\005\111\105\112\035\113\061\001\002\000\062" +
    "\002\uffb2\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\uffb2\042\uffb2\043\123\044\uffb2\045\125\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffb2\063\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\001\002\000\062" +
    "\002\uffab\031\uffab\032\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffab\063\uffab\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\071\uffab\001\002\000\062" +
    "\002\uffa6\031\uffa6\032\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\061\uffa6\063\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\001\002\000\062" +
    "\002\uffae\031\uffae\032\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffae\063\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\001\002\000\062" +
    "\002\uffa5\031\uffa5\032\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\061\uffa5\063\uffa5\065" +
    "\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\001\002\000\062" +
    "\002\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\140\051\136\052\132\061\uffa8\063\uffa8\065" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\001\002\000\062" +
    "\002\uffac\031\uffac\032\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffac\063\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\001\002\000\062" +
    "\002\uffad\031\uffad\032\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffad\063\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\001\002\000\062" +
    "\002\uffa4\031\uffa4\032\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\061\uffa4\063\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\001\002\000\062" +
    "\002\uffb0\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\uffb0\042\uffb0\043\123\044\142\045\125\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffb0\063\uffb0\065" +
    "\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\001\002\000\062" +
    "\002\uffaf\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\131\042\uffaf\043\123\044\142\045\125\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffaf\063\uffaf\065" +
    "\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\001\002\000\062" +
    "\002\uffa9\031\uffa9\032\uffa9\035\137\036\133\037\134\040" +
    "\141\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffa9\063\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\001\002\000\062" +
    "\002\uffaa\031\uffaa\032\uffaa\035\137\036\133\037\134\040" +
    "\141\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffaa\063\uffaa\065" +
    "\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\001\002\000\062" +
    "\002\uffb1\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\uffb1\042\uffb1\043\123\044\uffb1\045\uffb1\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffb1\063\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\001\002\000\062" +
    "\002\uffa7\031\uffa7\032\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\140\051\136\052\132\061\uffa7\063\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\001\002\000\062" +
    "\002\uffb3\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\135" +
    "\047\124\050\140\051\136\052\132\061\uffb3\063\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\001\002\000\062" +
    "\002\uff9f\031\uff9f\032\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\061\uff9f\063\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\001\002\000\004" +
    "\060\225\001\002\000\004\060\222\001\002\000\004\060" +
    "\211\001\002\000\004\060\170\001\002\000\004\106\171" +
    "\001\002\000\010\061\uffe0\066\uffe0\067\uffe0\001\002\000" +
    "\006\066\173\067\174\001\002\000\004\106\176\001\002" +
    "\000\004\106\175\001\002\000\010\061\uffdf\066\uffdf\067" +
    "\uffdf\001\002\000\006\061\200\066\177\001\002\000\004" +
    "\106\203\001\002\000\004\002\uffe5\001\002\000\006\061" +
    "\uffe3\066\uffe3\001\002\000\006\061\207\066\206\001\002" +
    "\000\004\071\204\001\002\000\004\106\171\001\002\000" +
    "\010\061\uffe1\066\uffe1\067\174\001\002\000\004\106\203" +
    "\001\002\000\004\002\uffe4\001\002\000\006\061\uffe2\066" +
    "\uffe2\001\002\000\010\061\ufff3\066\ufff3\106\214\001\002" +
    "\000\006\061\ufff2\066\ufff2\001\002\000\006\061\220\066" +
    "\217\001\002\000\004\071\215\001\002\000\022\073\026" +
    "\074\006\075\071\076\067\077\022\100\037\101\012\102" +
    "\072\001\002\000\006\061\ufff4\066\ufff4\001\002\000\004" +
    "\106\214\001\002\000\004\002\ufff5\001\002\000\006\061" +
    "\ufff1\066\ufff1\001\002\000\022\073\026\074\006\075\071" +
    "\076\067\077\022\100\037\101\012\102\072\001\002\000" +
    "\004\061\224\001\002\000\004\002\ufff6\001\002\000\004" +
    "\106\171\001\002\000\006\061\227\067\174\001\002\000" +
    "\004\002\uffde\001\002\000\044\031\126\032\127\035\137" +
    "\036\133\037\134\040\141\041\131\042\130\043\123\044" +
    "\142\045\125\046\135\047\124\050\140\051\136\052\132" +
    "\063\231\001\002\000\064\002\uff9d\031\uff9d\032\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\061\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\001\002\000\060\010\060\011\102\012" +
    "\013\017\052\020\004\022\045\023\065\030\053\034\016" +
    "\047\033\054\046\055\036\056\040\057\074\060\023\062" +
    "\057\064\062\106\120\107\076\110\005\111\105\112\035" +
    "\113\061\001\002\000\044\031\126\032\127\035\137\036" +
    "\133\037\134\040\141\041\131\042\130\043\123\044\142" +
    "\045\125\046\135\047\124\050\140\051\136\052\132\061" +
    "\234\001\002\000\062\002\uff9a\031\uff9a\032\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\061\uff9a\063\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\001\002\000\004\106\236\001\002\000\004\066\237" +
    "\001\002\000\004\111\240\001\002\000\004\061\241\001" +
    "\002\000\004\002\uffc6\001\002\000\046\031\126\032\127" +
    "\035\137\036\133\037\134\040\141\041\131\042\130\043" +
    "\123\044\142\045\125\046\135\047\124\050\140\051\136" +
    "\052\132\066\243\067\244\001\002\000\060\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\062\057\064\062\106\120\107\076\110\005\111\105" +
    "\112\035\113\061\001\002\000\004\002\uffd2\001\002\000" +
    "\006\066\121\067\246\001\002\000\004\002\uffd1\001\002" +
    "\000\046\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\131\042\130\043\123\044\142\045\125\046\135" +
    "\047\124\050\140\051\136\052\132\066\250\067\251\001" +
    "\002\000\060\010\060\011\102\012\013\017\052\020\004" +
    "\022\045\023\065\030\053\034\016\047\033\054\046\055" +
    "\036\056\040\057\074\060\023\062\057\064\062\106\120" +
    "\107\076\110\005\111\105\112\035\113\061\001\002\000" +
    "\004\002\uffd6\001\002\000\006\066\121\067\253\001\002" +
    "\000\004\002\uffd5\001\002\000\062\002\uffb4\031\uffb4\032" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\061\uffb4\063\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\001\002\000\066\002\uff9e\031\uff9e\032" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\061\uff9e\062\107\063\uff9e\065\uff9e\066\uff9e" +
    "\067\112\070\uff9e\071\uff9e\072\uff9e\001\002\000\004\072" +
    "\257\001\002\000\060\010\060\011\102\012\013\017\052" +
    "\020\004\022\045\023\065\030\053\034\016\047\033\054" +
    "\046\055\036\056\040\057\074\060\023\062\057\064\062" +
    "\106\120\107\076\110\005\111\105\112\035\113\061\001" +
    "\002\000\044\002\uffe8\031\126\032\127\035\137\036\133" +
    "\037\134\040\141\041\131\042\130\043\123\044\142\045" +
    "\125\046\135\047\124\050\140\051\136\052\132\001\002" +
    "\000\060\010\060\011\102\012\013\017\052\020\004\022" +
    "\045\023\065\030\053\034\016\047\033\054\046\055\036" +
    "\056\040\057\074\060\023\062\057\064\062\106\120\107" +
    "\076\110\005\111\105\112\035\113\061\001\002\000\044" +
    "\031\126\032\127\035\137\036\133\037\134\040\141\041" +
    "\131\042\130\043\123\044\142\045\125\046\135\047\124" +
    "\050\140\051\136\052\132\061\263\001\002\000\062\002" +
    "\uff97\031\uff97\032\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\061\uff97\063\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\071\uff97\001\002\000\004\106" +
    "\265\001\002\000\004\061\266\001\002\000\004\002\uffc8" +
    "\001\002\000\060\010\060\011\102\012\013\017\052\020" +
    "\004\022\045\023\065\030\053\034\016\047\033\054\046" +
    "\055\036\056\040\057\074\060\023\062\057\064\062\106" +
    "\120\107\076\110\005\111\105\112\035\113\061\001\002" +
    "\000\046\031\126\032\127\035\137\036\133\037\134\040" +
    "\141\041\131\042\130\043\123\044\142\045\125\046\135" +
    "\047\124\050\140\051\136\052\132\061\271\066\272\001" +
    "\002\000\004\002\uffce\001\002\000\060\010\060\011\102" +
    "\012\013\017\052\020\004\022\045\023\065\030\053\034" +
    "\016\047\033\054\046\055\036\056\040\057\074\060\023" +
    "\062\057\064\062\106\120\107\076\110\005\111\105\112" +
    "\035\113\061\001\002\000\006\061\274\066\121\001\002" +
    "\000\004\002\uffcd\001\002\000\004\072\304\001\002\000" +
    "\006\065\uffdb\066\302\001\002\000\004\065\301\001\002" +
    "\000\006\065\uffda\066\uffda\001\002\000\062\002\uff8f\031" +
    "\uff8f\032\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\061\uff8f\063\uff8f\065\uff8f\066\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\001\002\000\004\106\255\001" +
    "\002\000\006\065\uffd9\066\uffd9\001\002\000\060\010\060" +
    "\011\102\012\013\017\052\020\004\022\045\023\065\030" +
    "\053\034\016\047\033\054\046\055\036\056\040\057\074" +
    "\060\023\062\057\064\062\106\120\107\076\110\005\111" +
    "\105\112\035\113\061\001\002\000\050\002\uffdd\031\126" +
    "\032\127\035\137\036\133\037\134\040\141\041\131\042" +
    "\130\043\123\044\142\045\125\046\135\047\124\050\140" +
    "\051\136\052\132\065\uffdd\066\uffdd\001\002\000\004\106" +
    "\307\001\002\000\004\061\310\001\002\000\062\002\uff99" +
    "\031\uff99\032\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\061\uff99\063\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\001\002\000\004\063\312" +
    "\001\002\000\062\002\uff90\031\uff90\032\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\061" +
    "\uff90\063\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90" +
    "\001\002\000\004\060\314\001\002\000\062\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\061\uffc5\062\057\064\062\106\120\107\076\110\005" +
    "\111\105\112\035\113\061\001\002\000\004\061\316\001" +
    "\002\000\062\002\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\061\uffa0" +
    "\063\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\001" +
    "\002\000\004\106\320\001\002\000\004\066\321\001\002" +
    "\000\004\106\322\001\002\000\006\061\324\066\323\001" +
    "\002\000\004\111\325\001\002\000\062\002\uff96\031\uff96" +
    "\032\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\061\uff96\063\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\001\002\000\004\061\326\001\002" +
    "\000\062\002\uff95\031\uff95\032\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\061\uff95\063" +
    "\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\001\002" +
    "\000\060\010\060\011\102\012\013\017\052\020\004\022" +
    "\045\023\065\030\053\034\016\047\033\054\046\055\036" +
    "\056\040\057\074\060\023\062\057\064\062\106\120\107" +
    "\076\110\005\111\105\112\035\113\061\001\002\000\046" +
    "\031\126\032\127\035\137\036\133\037\134\040\141\041" +
    "\131\042\130\043\123\044\142\045\125\046\135\047\124" +
    "\050\140\051\136\052\132\061\331\066\332\001\002\000" +
    "\004\002\uffcc\001\002\000\060\010\060\011\102\012\013" +
    "\017\052\020\004\022\045\023\065\030\053\034\016\047" +
    "\033\054\046\055\036\056\040\057\074\060\023\062\057" +
    "\064\062\106\120\107\076\110\005\111\105\112\035\113" +
    "\061\001\002\000\006\061\334\066\121\001\002\000\004" +
    "\002\uffcb\001\002\000\004\106\336\001\002\000\004\061" +
    "\337\001\002\000\004\002\uffc7\001\002\000\062\002\uffb6" +
    "\031\uffb6\032\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\061\uffb6\063\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000\004\106\342" +
    "\001\002\000\006\061\344\066\343\001\002\000\004\111" +
    "\345\001\002\000\062\002\uff91\031\uff91\032\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\061\uff91\063\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\001\002\000\004\061\346\001\002\000\062\002\uff92" +
    "\031\uff92\032\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\061\uff92\063\uff92\065\uff92\066" +
    "\uff92\067\uff92\070\uff92\071\uff92\001\002\000\004\112\350" +
    "\001\002\000\004\061\351\001\002\000\004\002\uffc9\001" +
    "\002\000\062\002\uffb5\031\uffb5\032\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\061\uffb5" +
    "\063\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\001" +
    "\002\000\062\002\uffb8\031\uffb8\032\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\061\uffb8" +
    "\063\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001" +
    "\002\000\004\002\000\001\002\000\062\002\uffb7\031\uffb7" +
    "\032\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\140" +
    "\051\136\052\132\061\uffb7\063\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\001\002\000\046\031\126\032\127" +
    "\035\137\036\133\037\134\040\141\041\131\042\130\043" +
    "\123\044\142\045\125\046\135\047\124\050\140\051\136" +
    "\052\132\061\360\070\357\001\002\000\060\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\062\057\064\062\106\120\107\076\110\005\111\105" +
    "\112\035\113\061\001\002\000\062\002\uff89\031\uff89\032" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\061\uff89\063\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\001\002\000\044\031\126\032\127\035" +
    "\137\036\133\037\134\040\141\041\131\042\130\043\123" +
    "\044\142\045\125\046\135\047\124\050\140\051\136\052" +
    "\132\071\362\001\002\000\060\010\060\011\102\012\013" +
    "\017\052\020\004\022\045\023\065\030\053\034\016\047" +
    "\033\054\046\055\036\056\040\057\074\060\023\062\057" +
    "\064\062\106\120\107\076\110\005\111\105\112\035\113" +
    "\061\001\002\000\044\031\126\032\127\035\137\036\133" +
    "\037\134\040\141\041\131\042\130\043\123\044\142\045" +
    "\125\046\135\047\124\050\140\051\136\052\132\061\364" +
    "\001\002\000\062\002\uffa3\031\uffa3\032\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\061" +
    "\uffa3\063\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\001\002\000\046\031\126\032\127\035\137\036\133\037" +
    "\134\040\141\041\131\042\130\043\123\044\142\045\125" +
    "\046\135\047\124\050\140\051\136\052\132\066\366\067" +
    "\367\001\002\000\060\010\060\011\102\012\013\017\052" +
    "\020\004\022\045\023\065\030\053\034\016\047\033\054" +
    "\046\055\036\056\040\057\074\060\023\062\057\064\062" +
    "\106\120\107\076\110\005\111\105\112\035\113\061\001" +
    "\002\000\004\002\uffd8\001\002\000\006\066\121\067\371" +
    "\001\002\000\004\002\uffd7\001\002\000\060\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\062\057\064\062\106\120\107\076\110\005\111\105" +
    "\112\035\113\061\001\002\000\046\031\126\032\127\035" +
    "\137\036\133\037\134\040\141\041\131\042\130\043\123" +
    "\044\142\045\125\046\135\047\124\050\140\051\136\052" +
    "\132\061\374\066\375\001\002\000\004\002\uffd0\001\002" +
    "\000\060\010\060\011\102\012\013\017\052\020\004\022" +
    "\045\023\065\030\053\034\016\047\033\054\046\055\036" +
    "\056\040\057\074\060\023\062\057\064\062\106\120\107" +
    "\076\110\005\111\105\112\035\113\061\001\002\000\006" +
    "\061\377\066\121\001\002\000\004\002\uffcf\001\002\000" +
    "\060\010\060\011\102\012\013\017\052\020\004\022\045" +
    "\023\065\030\053\034\016\047\033\054\046\055\036\056" +
    "\040\057\074\060\023\062\057\064\062\106\120\107\076" +
    "\110\005\111\105\112\035\113\061\001\002\000\044\031" +
    "\126\032\127\035\137\036\133\037\134\040\141\041\131" +
    "\042\130\043\123\044\142\045\125\046\135\047\124\050" +
    "\140\051\136\052\132\061\u0102\001\002\000\004\002\uffca" +
    "\001\002\000\044\031\126\032\127\035\137\036\133\037" +
    "\134\040\141\041\131\042\130\043\123\044\142\045\125" +
    "\046\135\047\124\050\140\051\136\052\132\067\u0104\001" +
    "\002\000\062\002\uff9b\031\uff9b\032\uff9b\035\uff9b\036\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\061\uff9b" +
    "\063\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\001" +
    "\002\000\060\010\060\011\102\012\013\017\052\020\004" +
    "\022\045\023\065\030\053\034\016\047\033\054\046\055" +
    "\036\056\040\057\074\060\023\062\057\064\062\106\120" +
    "\107\076\110\005\111\105\112\035\113\061\001\002\000" +
    "\044\031\126\032\127\035\137\036\133\037\134\040\141" +
    "\041\131\042\130\043\123\044\142\045\125\046\135\047" +
    "\124\050\140\051\136\052\132\066\u0107\001\002\000\060" +
    "\010\060\011\102\012\013\017\052\020\004\022\045\023" +
    "\065\030\053\034\016\047\033\054\046\055\036\056\040" +
    "\057\074\060\023\062\057\064\062\106\120\107\076\110" +
    "\005\111\105\112\035\113\061\001\002\000\044\031\126" +
    "\032\127\035\137\036\133\037\134\040\141\041\131\042" +
    "\130\043\123\044\142\045\125\046\135\047\124\050\140" +
    "\051\136\052\132\061\u0109\001\002\000\062\002\uff98\031" +
    "\uff98\032\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\061\uff98\063\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\001\002\000\060\010\060\011" +
    "\102\012\013\017\052\020\004\022\045\023\065\030\053" +
    "\034\016\047\033\054\046\055\036\056\040\057\074\060" +
    "\023\062\057\064\062\106\120\107\076\110\005\111\105" +
    "\112\035\113\061\001\002\000\046\031\126\032\127\035" +
    "\137\036\133\037\134\040\141\041\131\042\130\043\123" +
    "\044\142\045\125\046\135\047\124\050\140\051\136\052" +
    "\132\061\u010c\066\u010d\001\002\000\004\002\uffd4\001\002" +
    "\000\060\010\060\011\102\012\013\017\052\020\004\022" +
    "\045\023\065\030\053\034\016\047\033\054\046\055\036" +
    "\056\040\057\074\060\023\062\057\064\062\106\120\107" +
    "\076\110\005\111\105\112\035\113\061\001\002\000\006" +
    "\061\u010f\066\121\001\002\000\004\002\uffd3\001\002\000" +
    "\004\106\u0111\001\002\000\004\066\u0112\001\002\000\004" +
    "\106\u0113\001\002\000\006\061\u0115\066\u0114\001\002\000" +
    "\004\111\u0116\001\002\000\062\002\uff93\031\uff93\032\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\061\uff93\063\uff93\065\uff93\066\uff93\067\uff93\070" +
    "\uff93\071\uff93\001\002\000\004\061\u0117\001\002\000\062" +
    "\002\uff94\031\uff94\032\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\061\uff94\063\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\062\002\033\003\065\004\040\005\043\006" +
    "\014\007\024\010\074\012\054\013\026\014\041\015\103" +
    "\017\046\020\031\021\007\022\102\023\053\024\027\025" +
    "\013\026\030\027\067\030\023\031\010\040\055\041\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\u0102\017\046\020\031\021\007" +
    "\022\102\023\053\024\114\025\013\026\030\027\067\030" +
    "\023\031\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\364\017\046\020\031\021\007\022\102\023" +
    "\053\024\114\025\013\026\030\027\067\030\023\031\010" +
    "\001\001\000\002\001\001\000\032\005\355\017\046\020" +
    "\031\021\007\022\102\023\053\024\114\025\013\026\030" +
    "\027\067\030\023\031\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\354\017\046\020\031\021\007\022\102\023\053\024\114" +
    "\025\013\026\030\027\067\030\023\031\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\352\017\046" +
    "\020\031\021\007\022\102\023\053\024\114\025\013\026" +
    "\030\027\067\030\023\031\010\001\001\000\002\001\001" +
    "\000\004\024\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\337\017\046\020\031\021\007\022\102\023" +
    "\053\024\114\025\013\026\030\027\067\030\023\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\115\017" +
    "\046\020\031\021\007\022\102\023\053\024\114\025\013" +
    "\026\030\027\067\030\023\031\010\034\116\035\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\277" +
    "\024\274\032\275\033\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\246\017\046\020" +
    "\031\021\007\022\102\023\053\024\114\025\013\026\030" +
    "\027\067\030\023\031\010\001\001\000\032\005\241\017" +
    "\046\020\031\021\007\022\102\023\053\024\114\025\013" +
    "\026\030\027\067\030\023\031\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\227\017" +
    "\046\020\031\021\007\022\102\023\053\024\114\025\013" +
    "\026\030\027\067\030\023\031\010\001\001\000\002\001" +
    "\001\000\036\005\115\017\046\020\031\021\007\022\102" +
    "\023\053\024\114\025\013\026\030\027\067\030\023\031" +
    "\010\034\116\035\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\121" +
    "\017\046\020\031\021\007\022\102\023\053\024\114\025" +
    "\013\026\030\027\067\030\023\031\010\001\001\000\002" +
    "\001\001\000\032\005\161\017\046\020\031\021\007\022" +
    "\102\023\053\024\114\025\013\026\030\027\067\030\023" +
    "\031\010\001\001\000\032\005\160\017\046\020\031\021" +
    "\007\022\102\023\053\024\114\025\013\026\030\027\067" +
    "\030\023\031\010\001\001\000\032\005\157\017\046\020" +
    "\031\021\007\022\102\023\053\024\114\025\013\026\030" +
    "\027\067\030\023\031\010\001\001\000\032\005\156\017" +
    "\046\020\031\021\007\022\102\023\053\024\114\025\013" +
    "\026\030\027\067\030\023\031\010\001\001\000\032\005" +
    "\155\017\046\020\031\021\007\022\102\023\053\024\114" +
    "\025\013\026\030\027\067\030\023\031\010\001\001\000" +
    "\032\005\154\017\046\020\031\021\007\022\102\023\053" +
    "\024\114\025\013\026\030\027\067\030\023\031\010\001" +
    "\001\000\032\005\153\017\046\020\031\021\007\022\102" +
    "\023\053\024\114\025\013\026\030\027\067\030\023\031" +
    "\010\001\001\000\032\005\152\017\046\020\031\021\007" +
    "\022\102\023\053\024\114\025\013\026\030\027\067\030" +
    "\023\031\010\001\001\000\032\005\151\017\046\020\031" +
    "\021\007\022\102\023\053\024\114\025\013\026\030\027" +
    "\067\030\023\031\010\001\001\000\032\005\150\017\046" +
    "\020\031\021\007\022\102\023\053\024\114\025\013\026" +
    "\030\027\067\030\023\031\010\001\001\000\032\005\147" +
    "\017\046\020\031\021\007\022\102\023\053\024\114\025" +
    "\013\026\030\027\067\030\023\031\010\001\001\000\032" +
    "\005\146\017\046\020\031\021\007\022\102\023\053\024" +
    "\114\025\013\026\030\027\067\030\023\031\010\001\001" +
    "\000\032\005\145\017\046\020\031\021\007\022\102\023" +
    "\053\024\114\025\013\026\030\027\067\030\023\031\010" +
    "\001\001\000\032\005\144\017\046\020\031\021\007\022" +
    "\102\023\053\024\114\025\013\026\030\027\067\030\023" +
    "\031\010\001\001\000\032\005\143\017\046\020\031\021" +
    "\007\022\102\023\053\024\114\025\013\026\030\027\067" +
    "\030\023\031\010\001\001\000\032\005\142\017\046\020" +
    "\031\021\007\022\102\023\053\024\114\025\013\026\030" +
    "\027\067\030\023\031\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\200\037\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\204\001\001\000\002\001\001" +
    "\000\004\011\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\211\036\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\215\001" +
    "\001\000\002\001\001\000\004\016\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\232\017\046\020\031\021\007" +
    "\022\102\023\053\024\114\025\013\026\030\027\067\030" +
    "\023\031\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\115\017\046\020\031\021\007\022\102\023\053\024" +
    "\114\025\013\026\030\027\067\030\023\031\010\034\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\115\017\046\020\031" +
    "\021\007\022\102\023\053\024\114\025\013\026\030\027" +
    "\067\030\023\031\010\034\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\257\017\046" +
    "\020\031\021\007\022\102\023\053\024\114\025\013\026" +
    "\030\027\067\030\023\031\010\001\001\000\002\001\001" +
    "\000\032\005\261\017\046\020\031\021\007\022\102\023" +
    "\053\024\114\025\013\026\030\027\067\030\023\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\267" +
    "\017\046\020\031\021\007\022\102\023\053\024\114\025" +
    "\013\026\030\027\067\030\023\031\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\115\017\046\020" +
    "\031\021\007\022\102\023\053\024\114\025\013\026\030" +
    "\027\067\030\023\031\010\034\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\302\024\274\001\001\000\002\001\001\000\032" +
    "\005\304\017\046\020\031\021\007\022\102\023\053\024" +
    "\114\025\013\026\030\027\067\030\023\031\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\115\017\046\020\031\021\007\022" +
    "\102\023\053\024\114\025\013\026\030\027\067\030\023" +
    "\031\010\034\116\035\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\327" +
    "\017\046\020\031\021\007\022\102\023\053\024\114\025" +
    "\013\026\030\027\067\030\023\031\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\115\017\046\020" +
    "\031\021\007\022\102\023\053\024\114\025\013\026\030" +
    "\027\067\030\023\031\010\034\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\360\017\046\020\031\021\007\022\102\023\053" +
    "\024\114\025\013\026\030\027\067\030\023\031\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\362" +
    "\017\046\020\031\021\007\022\102\023\053\024\114\025" +
    "\013\026\030\027\067\030\023\031\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\115\017\046\020\031\021\007\022\102\023\053\024\114" +
    "\025\013\026\030\027\067\030\023\031\010\034\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\372\017\046\020\031\021\007\022\102\023" +
    "\053\024\114\025\013\026\030\027\067\030\023\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\115\017\046\020\031\021\007\022\102\023\053\024\114" +
    "\025\013\026\030\027\067\030\023\031\010\034\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\u0100" +
    "\017\046\020\031\021\007\022\102\023\053\024\114\025" +
    "\013\026\030\027\067\030\023\031\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\u0105\017\046\020\031\021\007\022\102" +
    "\023\053\024\114\025\013\026\030\027\067\030\023\031" +
    "\010\001\001\000\002\001\001\000\032\005\u0107\017\046" +
    "\020\031\021\007\022\102\023\053\024\114\025\013\026" +
    "\030\027\067\030\023\031\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\u010a\017\046\020\031\021" +
    "\007\022\102\023\053\024\114\025\013\026\030\027\067" +
    "\030\023\031\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\115\017\046\020\031\021\007\022\102" +
    "\023\053\024\114\025\013\026\030\027\067\030\023\031" +
    "\010\034\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GlueParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GlueParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GlueParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
     // The System Logger
    private final static LOGDefaultLogger mLogger 
      = LOGDefaultLogger.getInstance();
    // Run the parser 
    public final static Command run(final String input) throws Exception {
        mLogger.message("Parsing Input String '" + input + "'");
        try {
            // Create A String Reader
            final StringReader reader = new StringReader(input);
            // Create A Glue Lexxer
            final GlueLexxer lexxer = new GlueLexxer(reader);
            // Create A Glue Parser
            final GlueParser parser = new GlueParser(lexxer);
            // Parse Input Content
            final Symbol symbol = parser.parse();
            // Cast The Symbol Down
            if(symbol != null) {
                mLogger.success("Parsing Success:\n" + symbol.value);  
                // Return command at success
                return (Command)symbol.value;
            } else {
                mLogger.failure("Parsing Failure: Invalid Parsing Result");  
                // Return NULL at failure
                return null;
            }
        } catch(final Exception exc) {
            mLogger.failure("Parsing Failure:\n" + exc.toString()); 
            // Return NULL at failure 
            return null;
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GlueParser$actions {


    // Trim the quotes
    public static String trim(final String value) {    
        return value.substring(1, value.length() - 1);
    }

  private final GlueParser parser;

  /** Constructor */
  CUP$GlueParser$actions(GlueParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GlueParser$do_action(
    int                        CUP$GlueParser$act_num,
    java_cup.runtime.lr_parser CUP$GlueParser$parser,
    java.util.Stack            CUP$GlueParser$stack,
    int                        CUP$GlueParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GlueParser$result;

      /* select the action based on the action number */
      switch (CUP$GlueParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // paren_expression ::= LPAREN expression RPAREN 
            {
              ParenExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new ParenExpression(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("paren_expression",19, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal_expression ::= STRING_LITERAL 
            {
              LiteralExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new StringLiteral(trim(x)); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("literal_expression",17, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal_expression ::= FLOAT_LITERAL 
            {
              LiteralExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new FloatLiteral(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("literal_expression",17, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal_expression ::= INTEGER_LITERAL 
            {
              LiteralExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new IntLiteral(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("literal_expression",17, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal_expression ::= BOOLEAN_LITERAL 
            {
              LiteralExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BoolLiteral(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("literal_expression",17, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal_expression ::= OBJECT_LITERAL 
            {
              LiteralExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new NullLiteral(); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("literal_expression",17, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // record_expression ::= LBRACE assignment_list_opt RBRACE 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new StructExpression(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("record_expression",22, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // record_expression ::= LBRACK expression_list_opt RBRACK 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new ArrayExpression(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("record_expression",22, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // invocation_expression ::= HistoryRunTimeOf LPAREN IDENTIFIER RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryRunTimeOf(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // invocation_expression ::= HistoryRunTimeOf LPAREN IDENTIFIER COMMA INTEGER_LITERAL RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryRunTimeOf(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // invocation_expression ::= HistoryValueOf LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryValueOf(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // invocation_expression ::= HistoryValueOf LPAREN IDENTIFIER COMMA IDENTIFIER COMMA INTEGER_LITERAL RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryValueOf(x, y, z); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-7)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // invocation_expression ::= HistoryContains LPAREN IDENTIFIER COMMA IDENTIFIER COMMA INTEGER_LITERAL RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryContains(x, y, z); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-7)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // invocation_expression ::= HistoryContains LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryContains(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // invocation_expression ::= Timeout LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new TimeoutQuery(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // invocation_expression ::= Contains LPAREN expression COMMA expression RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new ContainsList(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // invocation_expression ::= InState LPAREN IDENTIFIER RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new InStateQuery(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // invocation_expression ::= Random LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new RandomQuery(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // invocation_expression ::= QSTMINUS expression DOT 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PrologQuery(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation_expression",23, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_expression ::= IDENTIFIER DOT IDENTIFIER 
            {
              VariableExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new MemberVariable(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("variable_expression",18, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_expression ::= IDENTIFIER LBRACK expression RBRACK 
            {
              VariableExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new ArrayVariable(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("variable_expression",18, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable_expression ::= IDENTIFIER 
            {
              VariableExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new SimpleVariable(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("variable_expression",18, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // calling_expression ::= IDENTIFIER LPAREN expression_list_opt RPAREN 
            {
              CallingExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new CallingExpression(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("calling_expression",21, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // construct_expression ::= NEW IDENTIFIER LPAREN expression_list_opt RPAREN 
            {
              ConstructExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new ConstructExpression(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("construct_expression",20, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-4)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // reflection_expression ::= construct_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ConstructExpression x = (ConstructExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("reflection_expression",16, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // reflection_expression ::= calling_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		CallingExpression x = (CallingExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("reflection_expression",16, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ternary_expression ::= LPAREN expression QUESTION expression COLON expression RPAREN 
            {
              TernaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression z = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new TernaryExpression(x, y, z); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("ternary_expression",15, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-6)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binary_expression ::= expression MOD expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Mod, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binary_expression ::= expression DIV expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Div, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binary_expression ::= expression TIMES expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Mul, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binary_expression ::= expression MINUS expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Sub, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binary_expression ::= expression PLUS expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Add, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binary_expression ::= expression NOTEQUAL expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Neq, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binary_expression ::= expression EQUALEQUAL expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Eq, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binary_expression ::= expression GREATEREQUAL expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Ge, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binary_expression ::= expression LESSEQUAL expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Le, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binary_expression ::= expression GREATER expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Gt, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binary_expression ::= expression LESS expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Lt, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binary_expression ::= expression OROR expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.OrOr, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binary_expression ::= expression ANDAND expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.AndAnd, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binary_expression ::= expression XOR expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Xor, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binary_expression ::= expression OR expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.Or, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binary_expression ::= expression AND expression 
            {
              BinaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new BinaryExpression(x, BinaryOp.And, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("binary_expression",14, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_expression ::= DEC variable_expression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		VariableExpression x = (VariableExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new UnaryExpression(x, UnaryOp.Dec); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expression ::= INC variable_expression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		VariableExpression x = (VariableExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new UnaryExpression(x, UnaryOp.Inc); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_expression ::= LNOT expression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new UnaryExpression(x, UnaryOp.Lnot); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary_expression ::= MINUS expression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new UnaryExpression(x, UnaryOp.Neg); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary_expression ::= NOT expression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new UnaryExpression(x, UnaryOp.Not); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= paren_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ParenExpression x = (ParenExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		LiteralExpression x = (LiteralExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= record_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= variable_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		VariableExpression x = (VariableExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= reflection_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= invocation_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= ternary_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		TernaryExpression x = (TernaryExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= binary_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		BinaryExpression x = (BinaryExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= unary_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		UnaryExpression x = (UnaryExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_list ::= expression_list COMMA expression 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; RESULT.add(y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_list ::= expression 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new ArrayList(); RESULT.add(x); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_list_opt ::= expression_list 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = x; 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression_list_opt",27, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_list_opt ::= 
            {
              ArrayList RESULT =null;
		 
        RESULT = new ArrayList(); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("expression_list_opt",27, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // invocation ::= HistorySetDepth LPAREN IDENTIFIER COMMA INTEGER_LITERAL RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistorySetDepth(x,y);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // invocation ::= HistoryClearDeep LPAREN IDENTIFIER RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryClearDeep(x);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // invocation ::= HistoryClearFlat LPAREN IDENTIFIER RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new HistoryClearFlat(x);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // invocation ::= UnblockSceneScript LPAREN BOOLEAN_LITERAL RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new UnblockSceneScript(x);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // invocation ::= UnblockSceneGroup LPAREN expression RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new UnblockSceneGroup(x);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // invocation ::= PlayScene LPAREN expression COMMA expression_list RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayScenesActivity(x,y);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // invocation ::= PlayScene LPAREN expression RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayScenesActivity(x);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // invocation ::= PlayDialogAct LPAREN expression COMMA expression_list RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayDialogAction(x,y);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // invocation ::= PlayDialogAct LPAREN expression RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayDialogAction(x);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // invocation ::= StopAction LPAREN expression COMMA expression_list RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new StopActionActivity(x, y, StopMode.Default);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // invocation ::= StopAction LPAREN expression RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new StopActionActivity(x, StopMode.Default);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // invocation ::= NOTTILDE expression COMMA expression_list DOT 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new StopActionActivity(x, y, StopMode.Operator); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-4)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // invocation ::= NOTTILDE expression DOT 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new StopActionActivity(x, StopMode.Operator); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // invocation ::= PlayAction LPAREN expression COMMA expression_list RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayActionActivity(x, y, PlayMode.Default);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // invocation ::= PlayAction LPAREN expression RPAREN 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayActionActivity(x, PlayMode.Default);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // invocation ::= NOTMINUS expression COMMA expression_list DOT 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayActionActivity(x, y, PlayMode.Sequential); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-4)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // invocation ::= NOTMINUS expression DOT 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayActionActivity(x, PlayMode.Sequential); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // invocation ::= NOTEQUAL expression COMMA expression_list DOT 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		
        RESULT = new PlayActionActivity(x,y, PlayMode.Concurrent);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-4)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // invocation ::= NOTEQUAL expression DOT 
            {
              Invocation RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new PlayActionActivity(x, PlayMode.Concurrent);  
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("invocation",1, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment_list ::= assignment_list COMMA assignment 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Assignment y = (Assignment)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; RESULT.add(y); 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("assignment_list",24, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment_list ::= assignment 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Assignment x = (Assignment)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = new ArrayList(); RESULT.add(x); 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("assignment_list",24, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment_list_opt ::= assignment_list 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("assignment_list_opt",25, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment_list_opt ::= 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("assignment_list_opt",25, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= variable_expression EQUAL expression 
            {
              Assignment RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		VariableExpression x = (VariableExpression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new Assignment(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classpath_definition ::= IDENTIFIER COLON Class LPAREN class_qualifier RPAREN 
            {
              Definition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 System.err.println("Class Path Definition '" + y + "'"); RESULT = null; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("classpath_definition",9, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_qualifier ::= class_qualifier DOT IDENTIFIER 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x + "." + y; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("class_qualifier",32, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_qualifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("class_qualifier",32, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_definition ::= IDENTIFIER COLON class_qualifier 
            {
              ArgumentDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new ArgumentDefinition(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_definition_list ::= parameter_definition_list COMMA parameter_definition 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ArgumentDefinition y = (ArgumentDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; RESULT.add(y); 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("parameter_definition_list",29, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_definition_list ::= parameter_definition 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ArgumentDefinition x = (ArgumentDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = new ArrayList(); RESULT.add(x); 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("parameter_definition_list",29, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_definition ::= IDENTIFIER COLON Fun LPAREN class_qualifier COMMA IDENTIFIER COMMA parameter_definition_list RPAREN 
            {
              FunctionDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-9)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new FunctionDefinition(x, y, z, l); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("function_definition",5, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-9)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_definition ::= IDENTIFIER COLON Fun LPAREN class_qualifier COMMA IDENTIFIER RPAREN 
            {
              FunctionDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-7)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new FunctionDefinition(x, y, z); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("function_definition",5, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-7)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("type_identifier",31, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_identifier ::= primitive_type 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("type_identifier",31, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_definition ::= type_identifier IDENTIFIER EQUAL expression 
            {
              VariableDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression z = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new VariableDefinition(x, y, z); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("variable_definition",6, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-3)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primitive_type ::= STRING 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primitive_type ::= CHAR 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primitive_type ::= BOOL 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // primitive_type ::= DOUBLE 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // primitive_type ::= FLOAT 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primitive_type ::= LONG 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primitive_type ::= SHORT 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primitive_type ::= INT 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("primitive_type",30, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // member_definition_list ::= member_definition_list COMMA member_definition 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		ArrayList x = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		MemberDefinition y = (MemberDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 ArrayList vec = x; vec.add(y); RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("member_definition_list",28, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // member_definition_list ::= member_definition 
            {
              ArrayList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		MemberDefinition x = (MemberDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 ArrayList vec = new ArrayList(); vec.add(x); RESULT = vec; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("member_definition_list",28, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // member_definition_list ::= 
            {
              ArrayList RESULT =null;
		 ArrayList vec = new ArrayList(); RESULT = vec; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("member_definition_list",28, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // member_definition ::= IDENTIFIER COLON primitive_type 
            {
              MemberDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 
        RESULT = new MemberDefinition(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("member_definition",12, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-2)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // struct_type_definition ::= IDENTIFIER COLON Struct LPAREN member_definition_list RPAREN 
            {
              StructTypeDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		ArrayList y = (ArrayList)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new StructTypeDefinition(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("struct_type_definition",11, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_type_definition ::= IDENTIFIER COLON List LPAREN primitive_type RPAREN 
            {
              ListTypeDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		 
        RESULT = new ListTypeDefinition(x, y); 
    
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("list_type_definition",10, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-5)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datatype_definition ::= struct_type_definition 
            {
              DataTypeDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		StructTypeDefinition x = (StructTypeDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("datatype_definition",8, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // datatype_definition ::= list_type_definition 
            {
              DataTypeDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		ListTypeDefinition x = (ListTypeDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("datatype_definition",8, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= classpath_definition 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Definition x = (Definition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= function_definition 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		FunctionDefinition x = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= variable_definition 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		VariableDefinition x = (VariableDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definition ::= datatype_definition 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		DataTypeDefinition x = (DataTypeDefinition)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // command ::= expression 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= invocation 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Invocation x = (Invocation)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= assignment 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Assignment x = (Assignment)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= command EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).right;
		Command start_val = (Command)((java_cup.runtime.Symbol) CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)).value;
		RESULT = start_val;
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.elementAt(CUP$GlueParser$top-1)), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GlueParser$parser.done_parsing();
          return CUP$GlueParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // command ::= definition 
            {
              Command RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()).right;
		Command x = (Command)((java_cup.runtime.Symbol) CUP$GlueParser$stack.peek()).value;
		 RESULT = x; 
              CUP$GlueParser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GlueParser$stack.peek()), RESULT);
            }
          return CUP$GlueParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

