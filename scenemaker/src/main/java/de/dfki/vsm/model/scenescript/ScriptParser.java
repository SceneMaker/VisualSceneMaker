
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 16 11:25:15 CEST 2018
//----------------------------------------------------

package de.dfki.vsm.model.scenescript;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import de.dfki.vsm.util.log.*;
import de.dfki.vsm.util.syn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 16 11:25:15 CEST 2018
  */
public class ScriptParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScriptParser() {super();}

  /** Constructor which sets the default scanner. */
  public ScriptParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScriptParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\045\003\000\002\002\004\000\002\045" +
    "\003\000\002\011\003\000\002\005\002\000\002\005\003" +
    "\000\002\004\004\000\002\004\003\000\002\012\003\000" +
    "\002\012\003\000\002\014\003\000\002\013\006\000\002" +
    "\002\004\000\002\002\003\000\002\015\005\000\002\007" +
    "\004\000\002\007\003\000\002\016\003\000\002\017\004" +
    "\000\002\043\003\000\002\003\004\000\002\003\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\003\000\002\022\004\000\002\023" +
    "\005\000\002\024\005\000\002\025\004\000\002\025\005" +
    "\000\002\032\004\000\002\031\003\000\002\010\002\000" +
    "\002\010\003\000\002\006\004\000\002\006\003\000\002" +
    "\026\003\000\002\026\003\000\002\030\006\000\002\027" +
    "\005\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\003\000\002\037\003\000\002\040\003\000\002" +
    "\041\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\012\002\ufffd\022\015\023\014\027\006\001" +
    "\002\000\004\023\106\001\002\000\004\002\105\001\002" +
    "\000\004\021\051\001\002\000\010\002\uffdf\011\uffdf\023" +
    "\027\001\002\000\004\002\001\001\002\000\004\002\uffff" +
    "\001\002\000\010\002\ufff9\022\ufff9\027\ufff9\001\002\000" +
    "\010\002\ufffc\022\015\027\006\001\002\000\012\002\uffe0" +
    "\011\uffe0\017\021\023\uffe0\001\002\000\010\002\ufff7\022" +
    "\ufff7\027\ufff7\001\002\000\004\002\ufffe\001\002\000\010" +
    "\002\ufff8\022\ufff8\027\ufff8\001\002\000\010\002\ufffa\022" +
    "\ufffa\027\ufffa\001\002\000\004\023\uffe1\001\002\000\010" +
    "\002\ufffb\022\ufffb\027\ufffb\001\002\000\010\002\uffda\011" +
    "\uffda\023\uffda\001\002\000\010\002\uffdc\011\uffdc\023\uffdc" +
    "\001\002\000\004\026\033\001\002\000\010\002\uffde\011" +
    "\uffde\023\027\001\002\000\004\026\uffd7\001\002\000\006" +
    "\002\uffe3\011\uffe3\001\002\000\010\002\uffdb\011\uffdb\023" +
    "\uffdb\001\002\000\010\002\uffdd\011\uffdd\023\uffdd\001\002" +
    "\000\016\012\040\013\037\014\034\015\047\016\036\023" +
    "\045\001\002\000\010\002\uffcf\011\uffcf\023\uffcf\001\002" +
    "\000\010\002\uffd2\011\uffd2\023\uffd2\001\002\000\010\002" +
    "\uffcd\011\uffcd\023\uffcd\001\002\000\010\002\uffd0\011\uffd0" +
    "\023\uffd0\001\002\000\004\006\050\001\002\000\010\002" +
    "\uffd4\011\uffd4\023\uffd4\001\002\000\010\002\uffd3\011\uffd3" +
    "\023\uffd3\001\002\000\010\002\uffd6\011\uffd6\023\uffd6\001" +
    "\002\000\010\002\uffd8\011\uffd8\023\uffd8\001\002\000\010" +
    "\002\uffd1\011\uffd1\023\uffd1\001\002\000\010\002\uffd5\011" +
    "\uffd5\023\uffd5\001\002\000\010\002\uffce\011\uffce\023\uffce" +
    "\001\002\000\010\002\uffd9\011\uffd9\023\uffd9\001\002\000" +
    "\004\023\052\001\002\000\004\023\054\001\002\000\012" +
    "\002\ufff4\022\ufff4\023\ufff4\027\ufff4\001\002\000\004\017" +
    "\057\001\002\000\012\002\ufff6\022\ufff6\023\054\027\ufff6" +
    "\001\002\000\012\002\ufff5\022\ufff5\023\ufff5\027\ufff5\001" +
    "\002\000\010\004\066\010\063\012\064\001\002\000\012" +
    "\004\uffea\007\uffea\010\uffea\012\uffea\001\002\000\012\004" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\001\002\000\012\004\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\001\002\000\004\023\014\001" +
    "\002\000\004\006\102\001\002\000\020\002\ufff3\004\066" +
    "\010\063\012\064\022\ufff3\023\ufff3\027\ufff3\001\002\000" +
    "\014\004\uffe7\005\077\007\uffe7\010\uffe7\012\uffe7\001\002" +
    "\000\012\004\uffeb\007\uffeb\010\uffeb\012\uffeb\001\002\000" +
    "\020\002\ufff0\004\ufff0\010\ufff0\012\ufff0\022\ufff0\023\ufff0" +
    "\027\ufff0\001\002\000\012\004\uffec\007\uffec\010\uffec\012" +
    "\uffec\001\002\000\020\002\ufff1\004\ufff1\010\ufff1\012\ufff1" +
    "\022\ufff1\023\ufff1\027\ufff1\001\002\000\012\004\066\007" +
    "\076\010\063\012\064\001\002\000\020\002\uffef\004\uffef" +
    "\010\uffef\012\uffef\022\uffef\023\uffef\027\uffef\001\002\000" +
    "\012\004\uffed\007\uffed\010\uffed\012\uffed\001\002\000\020" +
    "\002\uffee\004\uffee\010\uffee\012\uffee\022\uffee\023\uffee\027" +
    "\uffee\001\002\000\004\004\100\001\002\000\012\004\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\001\002\000\020\002\ufff2\004" +
    "\ufff2\010\ufff2\012\ufff2\022\ufff2\023\ufff2\027\ufff2\001\002" +
    "\000\012\004\uffe6\007\uffe6\010\uffe6\012\uffe6\001\002\000" +
    "\004\011\104\001\002\000\012\004\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\001\002\000\004\002\000\001\002\000\010\002" +
    "\uffe0\011\uffe0\023\uffe0\001\002\000\010\002\uffdf\011\uffdf" +
    "\023\027\001\002\000\006\002\uffe2\011\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\026\004\012\005\015\011\007\012\017\013" +
    "\011\014\016\025\010\031\006\032\003\045\004\001\001" +
    "\000\004\031\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\025\010\027\026\023\027\030\030\022" +
    "\033\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\021\013\011\014\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\031\027\030\030\022\033\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\034\043\036\042\037\045\040\040" +
    "\041\041\042\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\054\015\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\055\001\001\000\002\001\001\000\024\003" +
    "\072\007\064\016\071\017\067\020\070\021\066\022\060" +
    "\023\061\024\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\102\031\006\032\003" +
    "\001\001\000\002\001\001\000\022\003\072\016\100\017" +
    "\067\020\070\021\066\022\060\023\061\024\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\074\021\066" +
    "\022\060\023\061\024\057\043\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\025\010\107\026\023\027\030\030" +
    "\022\033\024\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScriptParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScriptParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScriptParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Switch On/Off Debug Mode
    //action_obj.debug(mDebugFlag);

    }


    // The System Logger
    private final static LOGDefaultLogger mLogger 
      = LOGDefaultLogger.getInstance();

    // The Debugging Flag
    private boolean mDebugFlag = false;

    // Handle An Error 
    @Override
    public final void syntax_error(final Symbol symbol) {
      final Object object = symbol.value;
      if(object instanceof SyntaxDocToken) {
        SyntaxDocToken token = (SyntaxDocToken)object;
        mLogger.failure("Error: Syntax Error With Token\n'" + token + "'");
      } 
      // Propagate Error
      super.done_parsing();
    }
    // Handle An Error  
    @Override
    public final void unrecovered_syntax_error(final Symbol symbol) throws Exception {
      final Object object = symbol.value;
      if(object instanceof SyntaxDocToken) {
        final SyntaxDocToken token = (SyntaxDocToken)object;
        mLogger.failure("Error: Unrecovered Syntax Error\n'" + token + "'");
      } 
      // Propagate Error
      super.done_parsing();
    }
    // Construct The Token Parser
    public ScriptParser(final ScriptLexxer lexer, final boolean debug) {
        // Create The Parser
        super(lexer);
        // Init Debug Flag
        mDebugFlag = debug;
    }
    // Parse A Scene Script From  String
    public final static Object run(
        final String input,
        final boolean action,
        final boolean debug, 
        final boolean comment, 
        final boolean newline,
        final boolean whitespace) {
        //
        final String string = (action ? "[" + input + "]" : input);
        //
        //mLogger.message("Parsing Input String '" + string + "'");
        try {
            // Create A String Reader
            final StringReader reader = new StringReader(string);
             // Create A Script Lexxer
            final ScriptLexxer lexxer = new ScriptLexxer(
                reader, comment, newline, whitespace);
            // Create A Script Parser
            final ScriptParser parser = new ScriptParser(lexxer, debug);
            // Parse Input Content
            final Symbol symbol = parser.parse();
             // Cast The Symbol Down
            if(symbol != null) {
                if(action && symbol.value instanceof ActionObject) {
                    mLogger.success("Parsing Success: Parsing\n" + symbol.value);  
                    // Return result at success
                    return symbol.value;
                } else if(!action && symbol.value instanceof SceneScript) {
                    //mLogger.success("Parsing Success: Parsing\n" + symbol.value);  
                    // Return result at success
                    return symbol.value;
                } else {
                    mLogger.warning("Parsing Warning: Result Is No Script Entity");  
                    // Return NULL at failure
                    return null;
                }
            } else {
                mLogger.failure("Parsing Failure: Invalid Parsing Result");  
                // Return NULL at failure
                return null;
            }
        } catch(final Exception exc) {
            mLogger.failure("Parsing Failure:\n" + exc.toString()); 
            // Return NULL at failure 
            return null;
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScriptParser$actions {


    // The Singelton Logger
    private final LOGDefaultLogger mLogger = 
      LOGDefaultLogger.getInstance();
    // The Debugging Flag
    //private boolean mDebugFlag = false;
    // Set Debugging Flag
    //public final void debug(final boolean flag) {
    //    mDebugFlag = flag;
    //}
    // Create a Java Class From A String
    private final Class clazz(final String name) {
        Class clazz = null;
        try {
            // Try To Create The Class Object
            clazz = Class.forName(name);
        } catch (Exception e) {
            mLogger.failure(e.toString());
        } finally {
            // Finally Return The Class Object
            return clazz;
        }
    }
    // Print A Debug Message
    //private final void debug(final String message) {
    //    if(mDebugFlag) {
    //        mLogger.message(message);
    //    }
    //}

  private final ScriptParser parser;

  /** Constructor */
  CUP$ScriptParser$actions(ScriptParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScriptParser$do_action(
    int                        CUP$ScriptParser$act_num,
    java_cup.runtime.lr_parser CUP$ScriptParser$parser,
    java.util.Stack            CUP$ScriptParser$stack,
    int                        CUP$ScriptParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScriptParser$result;

      /* select the action based on the action number */
      switch (CUP$ScriptParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sqstring ::= SQSTRING 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("sqstring",32, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // floating ::= FLOATING 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("floating",31, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // integer ::= INTEGER 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("integer",30, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean ::= BOOLEAN 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // identifier ::= IDENTIFIER 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("identifier",28, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // feature_value ::= sqstring 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_value",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // feature_value ::= floating 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_value",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // feature_value ::= integer 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_value",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // feature_value ::= boolean 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_value",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // feature_value ::= identifier 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_value",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // feature_name ::= IDENTIFIER 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_name",25, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_feature ::= feature_name ASSIGNMENT feature_value 
            {
              ActionFeature RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken y = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionFeature(
            x.getLower(), y.getUpper(), 
            x.getValue(), y.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("simple_feature",21, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // action_param ::= feature_name ASSIGNMENT PLACEHOLDER VARIABLE 
            {
              ActionParam RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken y = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionParam(
            x.getLower(), y.getUpper(), 
            x.getValue(), y.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_param",22, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // action_feature ::= action_param 
            {
              ActionFeature RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionParam x = (ActionParam)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_feature",20, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // action_feature ::= simple_feature 
            {
              ActionFeature RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionFeature x = (ActionFeature)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_feature",20, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // feature_list ::= action_feature 
            {
              LinkedList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionFeature x = (ActionFeature)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<ActionFeature>();
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_list",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // feature_list ::= feature_list action_feature 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionFeature x = (ActionFeature)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_list",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // feature_list_opt ::= feature_list 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_list_opt",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // feature_list_opt ::= 
            {
              LinkedList RESULT =null;
		
        RESULT = new LinkedList<ActionFeature>();
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_list_opt",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // action_name ::= IDENTIFIER 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_name",23, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // action_actor ::= IDENTIFIER COLONMARK 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_actor",24, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // action_definition ::= action_actor action_name feature_list_opt 
            {
              ActionObject RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken y = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionObject(
                x.getLower(), y.getUpper(),
                x.getValue(), y.getValue(), l);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_definition",19, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // action_definition ::= action_name feature_list_opt 
            {
              ActionObject RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken y = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionObject(
                y.getLower(), y.getUpper(),
                null, y.getValue(), l);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("action_definition",19, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nested_action ::= ACTIONHEAD action_definition ACTIONFOOT 
            {
              ActionObject RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken h = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ActionObject x = (ActionObject)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken f = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("nested_action",18, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // utterance_abbreviation ::= SIMPLEWORD ABBREVIATION SIMPLEWORD 
            {
              SceneAbbrev RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken y = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneAbbrev(
            x.getLower(), y.getUpper(), 
            x.getValue(), y.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_abbreviation",17, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // utterance_variable ::= PLACEHOLDER VARIABLE 
            {
              SceneParam RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken y = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneParam(
            x.getLower(), y.getUpper(), y.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_variable",16, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // utterance_word ::= SIMPLEWORD 
            {
              SceneWord RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneWord(
            x.getLower(), x.getUpper(), x.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_word",15, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // utterance_element ::= utterance_abbreviation 
            {
              UttrElement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneAbbrev x = (SceneAbbrev)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_element",14, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // utterance_element ::= utterance_variable 
            {
              UttrElement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneParam x = (SceneParam)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_element",14, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // utterance_element ::= nested_action 
            {
              UttrElement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionObject x = (ActionObject)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_element",14, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // utterance_element ::= utterance_word 
            {
              UttrElement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneWord x = (SceneWord)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_element",14, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // utterance_element_list ::= utterance_element 
            {
              LinkedList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		UttrElement x = (UttrElement)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<UttrElement>();
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_element_list",1, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // utterance_element_list ::= utterance_element_list utterance_element 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		UttrElement x = (UttrElement)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_element_list",1, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // punctuation ::= PUNCTUATION 
            {
              SyntaxDocToken RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("punctuation",33, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // utterance_definition ::= utterance_element_list punctuation 
            {
              SceneUttr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken p = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        // Get The First Word In List
        UttrElement firstelement = (UttrElement)l.getFirst();
        // Construct A New Utterance
        RESULT = new SceneUttr(
            firstelement.getLower(), p.getUpper(), l, p.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_definition",13, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // turn_element ::= utterance_definition 
            {
              SceneUttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneUttr x = (SceneUttr)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_element",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // turn_element_list ::= turn_element 
            {
              LinkedList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneUttr x = (SceneUttr)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<SceneUttr>();
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_element_list",5, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // turn_element_list ::= turn_element_list turn_element 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneUttr x = (SceneUttr)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_element_list",5, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // turn ::= IDENTIFIER COLONMARK turn_element_list 
            {
              SceneTurn RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        // Get The Last Turn Object
        final SceneUttr lastuttr = (SceneUttr)l.getLast();
        // Construct The Turn Object
        RESULT = new SceneTurn(
            x.getLower(), 
            lastuttr.getUpper(), 
            x.getValue(), 
            l);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn",11, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // turn_list ::= turn 
            {
              LinkedList RESULT =null;
		int turnleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int turnright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneTurn turn = (SceneTurn)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<SceneTurn>();
        RESULT.add(turn);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_list",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // turn_list ::= turn_list turn 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int turnleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int turnright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneTurn turn = (SceneTurn)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(turn);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_list",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scene_definition ::= SCENEWORD LANGUAGE IDENTIFIER turn_list 
            {
              SceneObject RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken language = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken identifier = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        // Get The Last Turn Object
        final SceneTurn lastturn = (SceneTurn)list.getLast();
        // Construct Scene Object
        RESULT = new SceneObject(
            x.getLower(), 
            lastturn.getUpper(), 
            language.getValue(), 
            identifier.getValue(), 
            list);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_definition",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // script_comment ::= COMMENT 
            {
              SceneComment RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken x = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
          RESULT = new SceneComment( 
                x.getLower(), x.getUpper(), x.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("script_comment",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // scene_script_entity ::= script_comment 
            {
              ScriptEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneComment x = (SceneComment)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
          RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_entity",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scene_script_entity ::= scene_definition 
            {
              ScriptEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneObject x = (SceneObject)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
          RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_entity",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // scene_script_entity_list ::= scene_script_entity 
            {
              LinkedList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ScriptEntity x = (ScriptEntity)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<ScriptEntity>();
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_entity_list",2, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // scene_script_entity_list ::= scene_script_entity_list scene_script_entity 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ScriptEntity x = (ScriptEntity)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(x);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_entity_list",2, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // scene_script_entity_list_opt ::= scene_script_entity_list 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = l;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_entity_list_opt",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scene_script_entity_list_opt ::= 
            {
              LinkedList RESULT =null;
		
        RESULT = new LinkedList<ScriptEntity>();
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_entity_list_opt",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scene_script_definition ::= scene_script_entity_list_opt 
            {
              SceneScript RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneScript(0, 0, l);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene_script_definition",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // script_entity ::= action_definition 
            {
              ScriptEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionObject x = (ActionObject)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT =x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("script_entity",35, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script_entity EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ScriptEntity start_val = (ScriptEntity)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		RESULT = start_val;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScriptParser$parser.done_parsing();
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script_entity ::= scene_script_definition 
            {
              ScriptEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneScript x = (SceneScript)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = x;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("script_entity",35, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

