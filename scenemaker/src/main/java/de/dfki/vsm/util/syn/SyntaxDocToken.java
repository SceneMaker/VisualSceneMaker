package de.dfki.vsm.util.syn;

//~--- non-JDK imports --------------------------------------------------------

import de.dfki.vsm.model.ModelObject;
import de.dfki.vsm.util.ios.IOSIndentWriter;
import de.dfki.vsm.util.log.LOGDefaultLogger;
import de.dfki.vsm.util.xml.XMLParseError;
import de.dfki.vsm.util.xml.XMLWriteError;

import org.w3c.dom.Element;

//~--- JDK imports ------------------------------------------------------------

import java.io.ByteArrayOutputStream;

/**
 * @author Gregor Mehlmann
 */
public class SyntaxDocToken implements ModelObject {

    // The System Logger
    private final LOGDefaultLogger mLogger = LOGDefaultLogger.getInstance();

    // The Token Attributes
    private final int    mIndex;
    private final int    mState;
    private final int    mToken;
    private final int    mLower;
    private final int    mUpper;
    private final int    mLine;
    private final int    mColumn;
    private final String mField;
    private final String mLexic;
    private final String mValue;

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    // Construct The Token Object
    public SyntaxDocToken(final int index, final int state, final int token, final int lower, final int upper,
                          final int line, final int column, final String value, final String field,
                          final String lexic) {

        // Initialize The Attributes
        mIndex  = index;
        mState  = state;
        mToken  = token;
        mLower  = lower;
        mUpper  = upper;
        mLine   = line;
        mColumn = column;
        mValue  = value;
        mField  = field;
        mLexic  = lexic;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getIndex() {
        return mIndex;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getState() {
        return mState;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getToken() {
        return mToken;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getLower() {
        return mLower;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getUpper() {
        return mUpper;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getLine() {
        return mLine;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final int getColumn() {
        return mColumn;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final String getValue() {
        return mValue;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final String getField() {
        return mField;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public void writeXML(final IOSIndentWriter stream) throws XMLWriteError {
        stream.println("<SyntaxDocToken " + "field=\"" + mField + "\" " + "lexic=\"" + mLexic + "\" " + "token=\""
                       + mToken + "\" " + "index=\"" + mIndex + "\" " + "state=\"" + mState + "\" " + "lower=\""
                       + mLower + "\" " + "upper=\"" + mUpper + "\" " + "line=\"" + mLine + "\" " + "column=\""
                       + mColumn + "\">").push();
        stream.println(mValue).pop();
        stream.print("</SyntaxDocToken>");
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public void parseXML(Element element) throws XMLParseError {

        // TODO
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public SyntaxDocToken getCopy() {
        return new SyntaxDocToken(mIndex, mState, mToken, mLower, mUpper, mLine, mColumn, mValue, mField, mLexic);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public final String toString() {

        // Create A Byte Array Stream
        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();

        // Initialize The Indent Writer
        final IOSIndentWriter stream = new IOSIndentWriter(buffer);

        try {

            // Write Object
            writeXML(stream);
        } catch (XMLWriteError exc) {
            mLogger.failure(exc.toString());
        }

        // Cleanup Stream and Writer
        stream.flush();
        stream.close();

        // Return String Representation
        try {
            return buffer.toString("UTF-8");
        } catch (Exception exc) {
            return buffer.toString();
        }
    }
}
