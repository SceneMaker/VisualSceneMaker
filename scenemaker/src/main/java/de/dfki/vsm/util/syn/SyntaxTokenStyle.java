package de.dfki.vsm.util.syn;

//~--- non-JDK imports --------------------------------------------------------

import de.dfki.vsm.model.ModelObject;
import de.dfki.vsm.util.ios.IOSIndentWriter;
import de.dfki.vsm.util.log.LOGDefaultLogger;
import de.dfki.vsm.util.xml.XMLParseError;
import de.dfki.vsm.util.xml.XMLWriteError;

import org.w3c.dom.Element;

//~--- JDK imports ------------------------------------------------------------

import java.awt.Color;

import java.io.ByteArrayOutputStream;

/**
 * @author Gregor Mehlmann
 */
public final class SyntaxTokenStyle implements Comparable, ModelObject {

    // The System Logger
    private final LOGDefaultLogger mLogger = LOGDefaultLogger.getInstance();
    private String                 mName   = null;
    private Color                  mBCol   = null;
    private Color                  mFCol   = null;
    private boolean                mBold   = false;
    private boolean                mEmph   = false;
    private boolean                mUndl   = false;

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public SyntaxTokenStyle() {
        mName = null;
        mBCol = Color.WHITE;
        mFCol = Color.BLACK;
        mBold = false;
        mEmph = false;
        mUndl = false;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public SyntaxTokenStyle(final String name) {
        mName = name;
        mBCol = Color.WHITE;
        mFCol = Color.BLACK;
        mBold = false;
        mEmph = false;
        mUndl = false;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public SyntaxTokenStyle(final String name, final Color bcol, final Color fcol, final boolean bold,
                            final boolean emph, final boolean undl) {
        mName = name;
        mBCol = bcol;
        mFCol = fcol;
        mBold = bold;
        mEmph = emph;
        mUndl = undl;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final String getName() {
        return mName;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void setName(final String name) {
        mName = name;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final Color getBCol() {
        return mBCol;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void setBCol(final Color bcol) {
        mBCol = bcol;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final Color getFCol() {
        return mFCol;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void setFCol(final Color fcol) {
        mFCol = fcol;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final boolean isBold() {
        return mBold;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void setBold(final boolean bold) {
        mBold = bold;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final boolean isEmph() {
        return mEmph;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void setEmph(final boolean emph) {
        mEmph = emph;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final boolean isUndl() {
        return mUndl;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void setUndl(final boolean undl) {
        mUndl = undl;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final String getFHex() {
        return Integer.toHexString(mFCol.getRGB()).substring(2);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final String getBHex() {
        return Integer.toHexString(mBCol.getRGB()).substring(2);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public final int compareTo(final Object object) {
        if (object instanceof SyntaxTokenStyle) {
            return mName.compareTo(((SyntaxTokenStyle) object).mName);
        }

        return 0;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public final void writeXML(final IOSIndentWriter stream) throws XMLWriteError {
        stream.print("<TokenStyle " + "name=\"" + mName + "\" " + "fcol=\"#" + getFHex() + "\" " + "bcol=\"#"
                     + getBHex() + "\" " + "bold=\"" + mBold + "\" " + "emph=\"" + mEmph + "\" " + "undl=\"" + mUndl
                     + "\"/>");
        stream.flush();
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public void parseXML(final Element element) throws XMLParseError {
        mName = String.valueOf(element.getAttribute("name"));
        mEmph = Boolean.valueOf(element.getAttribute("emph"));
        mBold = Boolean.valueOf(element.getAttribute("bold"));
        mUndl = Boolean.valueOf(element.getAttribute("undl"));
        mFCol = new Color(Integer.decode(element.getAttribute("fcol")));
        mBCol = new Color(Integer.decode(element.getAttribute("bcol")));
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public SyntaxTokenStyle getCopy() {
        return new SyntaxTokenStyle(mName, mBCol, mFCol, mBold, mEmph, mUndl);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public final String toString() {

        // Create A Byte Array Stream
        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();

        // Initialize The Indent Writer
        final IOSIndentWriter stream = new IOSIndentWriter(buffer);

        try {

            // Write Object
            writeXML(stream);
        } catch (XMLWriteError exc) {
            mLogger.failure(exc.toString());
        }

        // Cleanup Stream and Writer
        stream.flush();
        stream.close();

        // Return String Representation
       try {
            //return buffer.toString("UTF-8");
            return buffer.toString();
        } catch (final Exception exc) {
            exc.printStackTrace();
            //
            return null;
        }
    }
}
