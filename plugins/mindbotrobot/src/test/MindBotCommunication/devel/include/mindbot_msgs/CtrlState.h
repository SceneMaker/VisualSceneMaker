// Generated by gencpp from file mindbot_msgs/CtrlState.msg
// DO NOT EDIT!


#ifndef MINDBOT_MSGS_MESSAGE_CTRLSTATE_H
#define MINDBOT_MSGS_MESSAGE_CTRLSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mindbot_msgs
{
template <class ContainerAllocator>
struct CtrlState_
{
  typedef CtrlState_<ContainerAllocator> Type;

  CtrlState_()
    : ctrl_state(0)  {
    }
  CtrlState_(const ContainerAllocator& _alloc)
    : ctrl_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ctrl_state_type;
  _ctrl_state_type ctrl_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(ON)
  #undef ON
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif

  enum {
    OFF = 0u,
    ON = 1u,
    ERROR = 2u,
  };


  typedef boost::shared_ptr< ::mindbot_msgs::CtrlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mindbot_msgs::CtrlState_<ContainerAllocator> const> ConstPtr;

}; // struct CtrlState_

typedef ::mindbot_msgs::CtrlState_<std::allocator<void> > CtrlState;

typedef boost::shared_ptr< ::mindbot_msgs::CtrlState > CtrlStatePtr;
typedef boost::shared_ptr< ::mindbot_msgs::CtrlState const> CtrlStateConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mindbot_msgs::CtrlState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mindbot_msgs::CtrlState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mindbot_msgs::CtrlState_<ContainerAllocator1> & lhs, const ::mindbot_msgs::CtrlState_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_state == rhs.ctrl_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mindbot_msgs::CtrlState_<ContainerAllocator1> & lhs, const ::mindbot_msgs::CtrlState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mindbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mindbot_msgs::CtrlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mindbot_msgs::CtrlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mindbot_msgs::CtrlState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bd2ce98651f7da53d3394dd6a9978bc";
  }

  static const char* value(const ::mindbot_msgs::CtrlState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bd2ce98651f7da5ULL;
  static const uint64_t static_value2 = 0x3d3394dd6a9978bcULL;
};

template<class ContainerAllocator>
struct DataType< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mindbot_msgs/CtrlState";
  }

  static const char* value(const ::mindbot_msgs::CtrlState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#CtrlState message\n"
"\n"
"#List of the available control states\n"
"uint8 OFF = 0\n"
"uint8 ON = 1\n"
"uint8 ERROR = 2\n"
"\n"
"#Assigned control state\n"
"uint8 ctrl_state\n"
;
  }

  static const char* value(const ::mindbot_msgs::CtrlState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CtrlState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mindbot_msgs::CtrlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mindbot_msgs::CtrlState_<ContainerAllocator>& v)
  {
    s << indent << "ctrl_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINDBOT_MSGS_MESSAGE_CTRLSTATE_H
