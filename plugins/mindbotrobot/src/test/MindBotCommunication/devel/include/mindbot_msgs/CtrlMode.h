// Generated by gencpp from file mindbot_msgs/CtrlMode.msg
// DO NOT EDIT!


#ifndef MINDBOT_MSGS_MESSAGE_CTRLMODE_H
#define MINDBOT_MSGS_MESSAGE_CTRLMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mindbot_msgs
{
template <class ContainerAllocator>
struct CtrlMode_
{
  typedef CtrlMode_<ContainerAllocator> Type;

  CtrlMode_()
    : ctrl_mode(0)  {
    }
  CtrlMode_(const ContainerAllocator& _alloc)
    : ctrl_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE0)
  #undef MODE0
#endif
#if defined(_WIN32) && defined(MODE1)
  #undef MODE1
#endif
#if defined(_WIN32) && defined(MODE2)
  #undef MODE2
#endif

  enum {
    MODE0 = 0u,
    MODE1 = 1u,
    MODE2 = 2u,
  };


  typedef boost::shared_ptr< ::mindbot_msgs::CtrlMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mindbot_msgs::CtrlMode_<ContainerAllocator> const> ConstPtr;

}; // struct CtrlMode_

typedef ::mindbot_msgs::CtrlMode_<std::allocator<void> > CtrlMode;

typedef boost::shared_ptr< ::mindbot_msgs::CtrlMode > CtrlModePtr;
typedef boost::shared_ptr< ::mindbot_msgs::CtrlMode const> CtrlModeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mindbot_msgs::CtrlMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mindbot_msgs::CtrlMode_<ContainerAllocator1> & lhs, const ::mindbot_msgs::CtrlMode_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_mode == rhs.ctrl_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mindbot_msgs::CtrlMode_<ContainerAllocator1> & lhs, const ::mindbot_msgs::CtrlMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mindbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mindbot_msgs::CtrlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mindbot_msgs::CtrlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mindbot_msgs::CtrlMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5e929f57b05b5ae4f0748d62736ba48";
  }

  static const char* value(const ::mindbot_msgs::CtrlMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5e929f57b05b5aeULL;
  static const uint64_t static_value2 = 0x4f0748d62736ba48ULL;
};

template<class ContainerAllocator>
struct DataType< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mindbot_msgs/CtrlMode";
  }

  static const char* value(const ::mindbot_msgs::CtrlMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#CtrlMode message\n"
"\n"
"#List of the available control modes\n"
"uint8 MODE0 = 0\n"
"uint8 MODE1 = 1\n"
"uint8 MODE2 = 2\n"
"\n"
"#Assigned control mode\n"
"uint8 ctrl_mode\n"
;
  }

  static const char* value(const ::mindbot_msgs::CtrlMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CtrlMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mindbot_msgs::CtrlMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mindbot_msgs::CtrlMode_<ContainerAllocator>& v)
  {
    s << indent << "ctrl_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINDBOT_MSGS_MESSAGE_CTRLMODE_H
