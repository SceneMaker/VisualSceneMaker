{"version":3,"sources":["components/utils/basicTable.js","components/infoLogUnit.js","components/inputSingleField.js","components/inputAllFields.js","components/inputSheetUnit.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","palette","common","black","color","white","body","fontSize","root","borderBottom","StyledTableRow","TableRow","action","hover","border","BasicTable","props","TableContainer","component","Paper","Table","sx","size","TableHead","colNames","map","name","index","TableBody","Object","keys","colVals","key","scope","vals","idx","InfoLogUnit","useState","open","setOpen","className","Button","variant","onClick","setCollapseDevToolComp","collapseDevToolComp","Tooltip","disableFocusListener","title","Collapse","in","dimension","style","height","vsmVars","console","log","myData","infoLogContents","fileName","today","Date","pad","n","s","Array","fill","slice","ms","getMilliseconds","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","genTimeStamp","csvData","forEach","k","push","join","csv","blob","Blob","type","href","URL","createObjectURL","link","document","createElement","download","appendChild","click","removeChild","GenerateInputFieldWithType","updateUserSubmittedInfo","formContents","currIdx","error","webSocket","variable","React","sliderVal","setSliderVal","values","options","split","marks","value","label","reduce","a","v","checkBoxState","setCheckBoxState","checkboxArrContainsObj","obj","i","length","Row","marginTop","marginBottom","InputLabel","focused","htmlFor","TextField","userSubmittedInfo","id","onChange","e","target","send","helperText","InputProps","inputProps","min","max","FormControl","undefined","RadioGroup","option","Form","Check","checked","FormHelperText","FormControlLabel","control","Checkbox","defaultValue","newCheckBoxState","newCheckBoxStateArr","filter","checkBoxStateStr","updateCheckBoxAndUserInfo","Slider","valueLabelDisplay","newSliderVal","getAriaValueText","GenerateFields","fieldsForUserForm","inputSheetFieldDetails","currField","formFillingErrors","field","InputSheetUnit","setFormFillingErrors","validateForm","unfilledFields","sort","errors","unfilledField","reqdVars","sortedReqdVars","sortedFilledVars","x","includes","marginLeft","setUserSubmittedInfo","Grid","container","spacing","direction","alignItems","justifyContent","item","xs","Stack","textAlign","borderRadius","padding","width","sendSubmit","startIcon","sendCancel","App","vsmConnectionStatus","setVsmConnectionStatus","setInfoLogContents","informContent","setInformContent","setInputSheetFieldDetails","dispProceedBtn","setDispProceedBtn","proceedBtnUid","setProceedBtnUid","vsmVarsForDevToolComp","setVsmVarsForDevToolComp","clientAliveMessage","readyState","WebSocket","OPEN","setTimeout","useEffect","ws","location","host","onopen","onclose","msg","err_msg","onmessage","parts","data","command","newInputSheetFieldDetails","timestamp","vm_uid","newObj","newInfo","assign","val","newVarVal","querySelector","rel","getElementsByTagName","disconnect","items","hasOwnProperty","Map","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bcf6b5f.chunk.js","sourcesContent":["import * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport {styled} from '@mui/material/styles';\nimport {tableCellClasses} from '@mui/material/TableCell';\n\n\nconst StyledTableCell = styled(TableCell)(({theme}) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n    [`&.${tableCellClasses.root}`]: {\n        borderBottom: \"none\"\n    }\n}));\n\nconst StyledTableRow = styled(TableRow)(({theme}) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\n/**\n * The component that converts and displays the supplied informatio in a tabular format. It is currently used to display\n * \n *\n * @version 1.0\n * @author [Chirag Bhuvaneshwara](https://github.com/chiragbhuvaneshwara)\n **/\nconst BasicTable = (props) => {\n\n\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{\n            }} size=\"small\" aria-label=\"simple table\">\n                <TableHead>\n                    <StyledTableRow>\n                        {\n                            props.colNames.map((name, index) => (\n                                <StyledTableCell key={index}>{name}</StyledTableCell>\n                            ))\n                        }\n                    </StyledTableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        Object.keys(props.colVals).map((key, index) => (\n                            <StyledTableRow\n                                key={index}\n                                sx={{'&:last-child td, &:last-child th': {border: 0}}}\n                            >\n                                <StyledTableCell component=\"th\" scope=\"row\">\n                                    {key}\n                                </StyledTableCell>\n                                {\n                                    props.colVals[key].map((vals, idx) => (\n                                        <StyledTableCell\n                                                         key={idx}>\n                                            {vals}\n                                        </StyledTableCell>\n                                    ))\n                                }\n                            </StyledTableRow>\n                        ))\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default BasicTable;","import React, {useState} from \"react\";\nimport DeveloperModeIcon from '@mui/icons-material/DeveloperMode';\nimport {Collapse, Tooltip} from \"@material-ui/core\";\nimport BasicTable from \"./utils/basicTable\";\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Button from \"@mui/material/Button\";\n\n\nfunction genTimeStamp() {\n    let today = new Date();\n    const pad = (n, s = 2) => (`${new Array(s).fill(0)}${n}`).slice(-s);\n\n    let ms = today.getMilliseconds();\n    ms = (ms < 10 ? \"0\" : \"\") + ms;\n    ms = (ms < 100 ? \"0\" : \"\") + ms;\n\n    let timestamp = today.getFullYear() + '-' + pad(today.getMonth() + 1) + '-' + pad(today.getDate()) + \"_\" +\n        pad(today.getHours()) + \":\" + pad(today.getMinutes()) + \":\" + pad(today.getSeconds()) + \":\" + ms;\n    return timestamp;\n};\n\n\n/**\n * The component in the Studymaster Web GUI that collects the log information that is useful for debugging.\n *\n * @version 1.0\n * @author [Chirag Bhuvaneshwara](https://github.com/chiragbhuvaneshwara)\n **/\nconst InfoLogUnit = (props) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <div className=\"sidebar-divider\">\n            <div className=\"button-area \">\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        props.setCollapseDevToolComp(!props.collapseDevToolComp);\n                        setOpen(!open);\n                    }}\n                    aria-controls=\"example-collapse-text\"\n                    aria-expanded={open}\n                >\n                    {\n                        (open) &&\n                        <div>\n                            <DeveloperModeIcon/> Developer Tools\n                        </div>\n                    }\n                    {\n                        (!open) &&\n                        <Tooltip disableFocusListener title=\"Developer Tools\">\n                            <DeveloperModeIcon/>\n                        </Tooltip>\n\n                    }\n                </Button>\n            </div>\n\n            <div className=\"variable-list\">\n                <Collapse in={open} dimension=\"width\">\n                    <hr/>\n\n                    <div>\n                        <h3>VSM Variable List</h3>\n                        <hr/>\n                        <div className={open ? \"logbox\" : \"\"} style={{height: '35vh', color: 'white'}}>\n\n                            <BasicTable\n                                colNames={[\"Variables\", \"Value\"]} colVals={props.vsmVars}/>\n                        </div>\n                    </div>\n\n                </Collapse>\n            </div>\n\n\n            <div className=\"log\">\n                <Collapse in={open} dimension=\"width\">\n                    <hr/>\n\n                    <div>\n                        <div className=\"flex-container\">\n                            <div className=\"item1\">\n                                <h3>Log history</h3>\n                            </div>\n                            <div className=\"item2\">\n                                <Button\n                                    variant=\"secondary\"\n                                    onClick={() => {\n                                        console.log(\"Downloading...\");\n                                        const myData = props.infoLogContents;\n                                        const fileName = \"StudyMasterDebugLog\" + genTimeStamp();\n                                        const header = [\"Timestamp\", \"cmdType\", \"cmdContent\"];\n                                        let csvData = [];\n                                        Object.keys(myData).forEach(\n                                            (k) => {\n                                                csvData.push([k, myData[k].join(',')].join(','))\n                                            }\n                                        )\n                                        const csv = [\n                                            header.join(','),\n                                            ...csvData\n                                        ].join('\\r\\n');\n                                        const blob = new Blob([csv], {type: 'application/csv'});\n                                        const href = URL.createObjectURL(blob);\n                                        const link = document.createElement('a');\n                                        link.href = href;\n                                        link.download = fileName + \".csv\";\n                                        document.body.appendChild(link);\n                                        link.click();\n                                        document.body.removeChild(link);\n                                    }}\n                                >\n                                    <DownloadIcon/> Download logs\n                                </Button>\n                            </div>\n                        </div>\n\n                        <hr/>\n                        <div className={open ? \"logbox\" : \"\"} style={{height: '35vh', color: 'white'}}>\n\n                            <BasicTable\n                                colNames={[\"Timestamp\", \"cmdType\", \"cmdContent\"]} colVals={props.infoLogContents}/>\n\n                        </div>\n                    </div>\n                </Collapse>\n            </div>\n\n        </div>\n\n    )\n};\n\nexport default InfoLogUnit;","import {Row} from \"react-bootstrap\";\nimport React, {useState} from \"react\";\nimport {FormHelperText, TextField} from \"@mui/material\";\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport {Checkbox, InputLabel, Slider} from \"@material-ui/core\";\nimport {Form} from \"react-bootstrap\";\n\n/**\n * The component in the Studymaster Web GUI that generates each input field based on the cmd from VSM.\n *\n * @version 1.0\n * @author [Chirag Bhuvaneshwara](https://github.com/chiragbhuvaneshwara)\n **/\nfunction GenerateInputFieldWithType(props, updateUserSubmittedInfo, formContents, currIdx, error, webSocket) {\n\n\n    let variable = formContents.variable[currIdx];\n\n    const [sliderVal, setSliderVal] = React.useState(50);\n\n    let values = formContents.options[currIdx].split(',');\n    const marks = [\n        {\n            value: 0,\n            label: values[0],\n        },\n        {\n            value: 100,\n            label: values[1],\n        }\n    ];\n\n    function valuetext(value) {\n        return `${value}`;\n    }\n\n    const [checkBoxState, setCheckBoxState] = useState(values.reduce((a, v) => ({...a, [v]: false}), {}));\n\n    function checkboxArrContainsObj(a, obj) {\n\n        if (typeof a === \"undefined\") {\n            return false;\n        }\n\n        let i = a.length;\n        while (i--) {\n            if (a[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    function updateCheckBoxAndUserInfo(variable, e) {\n\n        let newCheckBoxState = {\n            ...checkBoxState,\n            [e.target.name]: e.target.checked,\n        }\n\n        setCheckBoxState(newCheckBoxState)\n\n        let newCheckBoxStateArr = Object.keys(newCheckBoxState).filter(k => newCheckBoxState[k] === true);\n        let checkBoxStateStr = \" \";\n        if (newCheckBoxStateArr.length > 0) {\n            checkBoxStateStr = newCheckBoxStateArr.join(\",\");\n        }\n        updateUserSubmittedInfo(variable, checkBoxStateStr);\n        props.webSocket.send(`VSMMessage#VAR#${variable}#` + checkBoxStateStr);\n\n    }\n\n    return (\n        <div>\n            {\n                (formContents.type[currIdx] === \"text\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n                    <TextField variant=\"standard\" name={variable}\n                               label={formContents.options[currIdx]}\n                               value={props.userSubmittedInfo[variable] || ''}\n                               id={variable}\n                               onChange={e => {\n                                   updateUserSubmittedInfo(variable, e.target.value);\n                                   props.webSocket.send(`VSMMessage#VAR#${variable}#${e.target.value}`);\n                               }}\n                               {...(error[variable] && {\n                                   error: true,\n                                   helperText: error[variable]\n                               })}\n                    />\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"number\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n                    <TextField\n                        type=\"number\" style={{\"width\": \"150px\"}} name={variable}\n                        InputProps={{inputProps: {min: 0, max: 1000}}}\n                        label={formContents.options[currIdx]}\n                        id={variable}\n                        value={props.userSubmittedInfo[variable] || ''}\n                        onChange={e => {\n                            updateUserSubmittedInfo(variable, e.target.value);\n                            props.webSocket.send(`VSMMessage#VAR#${variable}#${e.target.value}`);\n                        }}\n                        {...(error[variable] && {\n                            error: true,\n                            helperText: error[variable]\n                        })}\n                    />\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"radio\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n                    <Row>\n                        <FormControl\n                            error={error[variable] !== undefined}\n                        >\n                            <RadioGroup\n                                aria-label={formContents.variable[currIdx]}\n                                name=\"radio-buttons-group\"\n                            >\n\n                                {values.map((option) =>\n                                    <Form.Check\n                                        key={option}\n                                        name={\"group1\"}\n                                        type={\"radio\"}\n                                        label={option}\n                                        value={option || ''}\n                                        checked={props.userSubmittedInfo[variable] === option || false}\n                                        onChange={e => {\n                                            updateUserSubmittedInfo(variable, e.target.value);\n                                            props.webSocket.send(`VSMMessage#VAR#${variable}#${e.target.value}`);\n                                        }}\n                                    />\n                                )}\n                                <FormHelperText>{error[variable]}</FormHelperText>\n                            </RadioGroup>\n                        </FormControl>\n\n                    </Row>\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"checkbox\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n\n                    <FormControl\n                        error={error[variable] !== undefined}\n                    >\n                        {values.map((option) =>\n                            <FormControlLabel\n                                key={option}\n                                label={option}\n                                control={\n                                    <Checkbox\n                                        defaultValue={false}\n                                        name={option}\n                                        color=\"default\"\n                                        checked={checkboxArrContainsObj(props.userSubmittedInfo[variable], option)}\n                                        onChange={e => {\n                                            updateCheckBoxAndUserInfo(variable, e);\n                                        }}\n                                    />\n                                }\n                            />\n                        )}\n                        <FormHelperText>{error[variable]}</FormHelperText>\n                    </FormControl>\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"slider\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n\n                    <FormControl\n                        error={error[variable] !== undefined}\n                    >\n\n                        <Slider\n                            value={sliderVal}\n                            aria-label=\"Default\" valueLabelDisplay=\"auto\"\n                            onChange={(e, newSliderVal) => {\n                                updateUserSubmittedInfo(variable, newSliderVal);\n                                setSliderVal(newSliderVal);\n                                props.webSocket.send(`VSMMessage#VAR#${variable}#${newSliderVal}`);\n                            }}\n                            getAriaValueText={valuetext}\n                            // step={10}\n                            marks={marks}\n                        />\n\n                        <FormHelperText>{error[variable]}</FormHelperText>\n                    </FormControl>\n                </Row>\n            }\n        </div>\n    )\n}\n\nexport default GenerateInputFieldWithType;","import React from \"react\";\nimport GenerateInputFieldWithType from \"./inputSingleField\";\n\n\n/**\n * The component in the Studymaster Web GUI that generates all the input fields based on the cmd from VSM.\n *\n * @version 1.0\n * @author [Chirag Bhuvaneshwara](https://github.com/chiragbhuvaneshwara)\n **/\nfunction GenerateFields(props) {\n\n    let fieldsForUserForm = [];\n\n    if (props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\")) {\n        for (let i = 0; i < props.inputSheetFieldDetails.variable.length; i++) {\n            let currField = GenerateInputFieldWithType(props, props.updateUserSubmittedInfo,\n                props.inputSheetFieldDetails, i, props.formFillingErrors, props.webSocket);\n            fieldsForUserForm.push(currField);\n        }\n    }\n\n\n    return (\n        <div>\n            {fieldsForUserForm.map((field, index) =>\n                <div\n                    key={index}\n\n                    style={{\"width\": \"95%\",}}\n\n\n                >\n                    {field}\n                </div>\n            )\n            }\n        </div>\n    )\n}\n\nexport default GenerateFields;","import GenerateFields from \"./inputAllFields\";\nimport Button from '@mui/material/Button';\nimport React, {useState} from \"react\";\nimport {Grid, Stack} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SendIcon from '@mui/icons-material/Send';\n\n/**\n * The component in the Studymaster Web GUI that corresponds to the area of the website where a form can be generated.\n *\n * @version 1.0\n * @author [Chirag Bhuvaneshwara](https://github.com/chiragbhuvaneshwara)\n **/\nfunction InputSheetUnit(props) {\n\n    const [formFillingErrors, setFormFillingErrors] = useState({});\n\n    function validateForm() {\n\n        if (props.userSubmittedInfo.size === 0) {\n            let unfilledFields = [...props.inputSheetFieldDetails.variable].sort();\n            let errors = {}\n            unfilledFields.forEach(function (unfilledField) {\n                    errors[unfilledField] = \"Please fill \" + unfilledField;\n                }\n            );\n            setFormFillingErrors(errors);\n            return false;\n        } else if ([...Object.keys(props.userSubmittedInfo)].length > 0) {\n\n            let reqdVars = [];\n            for (let i = 0; i < props.inputSheetFieldDetails.variable.length; i++) {\n                if (props.inputSheetFieldDetails.type[i] !== \"checkbox\") {\n                    reqdVars.push(props.inputSheetFieldDetails.variable[i])\n                }\n            }\n\n            let sortedReqdVars = [...reqdVars].sort();\n            let sortedFilledVars = [...Object.keys(props.userSubmittedInfo)].sort();\n            sortedFilledVars = sortedFilledVars.filter(x => props.userSubmittedInfo[x] !== \"\")\n\n            let unfilledFields = sortedReqdVars.filter(x => !sortedFilledVars.includes(x));\n\n            let errors = {}\n            unfilledFields.forEach(function (unfilledField) {\n                    errors[unfilledField] = \"Please fill \" + unfilledField;\n                }\n            );\n            setFormFillingErrors(errors);\n\n            if (unfilledFields.length === 0) {\n                return true;\n            }\n        }\n    }\n\n    function validateFormAndSubmit() {\n\n        if (validateForm()) {\n            props.sendSubmit();\n        }\n    }\n\n    return (\n        <div className=\"input-sheet-unit-divider\">\n            <form style={{\n                marginLeft: \"1vw\",\n            }}>\n                <div className=\"in-form-fields\">\n                    <fieldset>\n                        {(props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\"))}\n                        <GenerateFields userSubmittedInfo={props.userSubmittedInfo}\n                                        setUserSubmittedInfo={props.setUserSubmittedInfo}\n                                        updateUserSubmittedInfo={props.updateUserSubmittedInfo}\n                                        inputSheetFieldDetails={props.inputSheetFieldDetails}\n                                        validateForm={validateForm}\n                                        formFillingErrors={formFillingErrors}\n                                        webSocket={props.webSocket}\n                        />\n\n                        {\n                            (props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"SUCCESSFULSEND\")) &&\n                            <div>\n                                <h2 style={{color: \"green\"}}>Successfully posted!</h2>\n                            </div>\n                        }\n                    </fieldset>\n                </div>\n            </form>\n            <form>\n                <div className=\"in-form-buttons\">\n                    {\n                        (props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\")) &&\n                        <Grid container\n                              spacing={0}\n                              direction=\"column\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                        >\n                            <Grid item xs={2}>\n                                <Stack direction=\"row\" spacing={2} style={{textAlign: 'center'}}>\n                                    <Button style={{\n                                        borderRadius: 35,\n                                        backgroundColor: \"green\",\n                                        padding: \"18px 36px\",\n                                        fontSize: \"18px\",\n                                        width: \"15vw\"\n                                    }} variant=\"contained\"\n                                            onClick={validateFormAndSubmit} startIcon={<SendIcon/>}> Submit</Button>\n                                    <Button style={{\n                                        borderRadius: 35,\n                                        backgroundColor: \"red\",\n                                        padding: \"18px 36px\",\n                                        fontSize: \"18px\",\n                                        width: \"15vw\"\n                                    }} variant=\"contained\" color=\"error\"\n                                            onClick={props.sendCancel} startIcon={<DeleteIcon/>}> Cancel</Button>\n                                </Stack>\n                            </Grid>\n                        </Grid>\n\n                    }\n                    {\n                        !(props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\")) &&\n                        <div>\n                            <p style={{color: \"white\"}}>No active requests.</p>\n                        </div>\n                    }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default InputSheetUnit;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport InfoLogUnit from \"./components/infoLogUnit\";\nimport InputSheetUnit from \"./components/inputSheetUnit\";\nimport LinkIcon from '@mui/icons-material/Link';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\nimport {Tooltip} from \"@material-ui/core\";\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport Button from \"@mui/material/Button\";\n\nfunction genTimeStamp() {\n    let today = new Date();\n    const pad = (n,s=2) => (`${new Array(s).fill(0)}${n}`).slice(-s);\n\n    let ms = today.getMilliseconds();\n    ms = (ms < 10? \"0\": \"\") + ms;\n    ms = (ms < 100? \"0\": \"\") + ms;\n\n    let timestamp = today.getFullYear() + '-' + pad(today.getMonth() + 1) + '-' + pad(today.getDate()) + \"_\" +\n        pad(today.getHours()) + \":\" + pad(today.getMinutes()) + \":\" + pad(today.getSeconds()) + \":\" + ms;\n    return timestamp;\n};\n\nlet webSocket;\n\n/**\n * Studymaster web app main page.\n *\n * @version 1.0\n * @author [Chirag Bhuvaneshwara](https://github.com/chiragbhuvaneshwara)\n **/\nfunction App() {\n    const [vsmConnectionStatus, setVsmConnectionStatus] = useState(false);\n    const [infoLogContents, setInfoLogContents] = useState({});\n    const [informContent, setInformContent] = useState(\"\");\n    const [inputSheetFieldDetails, setInputSheetFieldDetails] = useState();\n    const [collapseDevToolComp, setCollapseDevToolComp] = useState(true);\n    const [dispProceedBtn, setDispProceedBtn] = useState(false);\n    const [proceedBtnUid, setProceedBtnUid] = useState(\"\");\n    const [vsmVarsForDevToolComp, setVsmVarsForDevToolComp] = useState({});\n    const [userSubmittedInfo, setUserSubmittedInfo] = useState({});\n\n    const updateUserSubmittedInfo = (k, v) => {\n        let items = {...userSubmittedInfo};\n        items[k] = v;\n        setUserSubmittedInfo(items);\n    };\n\n    useEffect(() => {\n        console.log(\"Setting up web socket...\");\n        webSocket = new WebSocket('ws://' + document.location.host + '/ws');\n\n        let ws = webSocket;\n\n        ws.onopen = function () {\n            setVsmConnectionStatus(true);\n            clientAliveMessage();\n            console.log(\"Connection initiated by server.\")\n            setVsmVarsForDevToolComp({});\n            setInfoLogContents({});\n\n        };\n\n        ws.onclose = function (msg) {\n            setVsmConnectionStatus(false);\n            setUserSubmittedInfo({});\n            setInputSheetFieldDetails({});\n\n            setDispProceedBtn(false);\n            setProceedBtnUid(\"\");\n            let err_msg = \"VSM is not in 'play' state anymore. Please press 'play' in VSM and refresh the page.\";\n            console.log(err_msg);\n            setInformContent(err_msg);\n\n        };\n\n        ws.onmessage = function (msg) {\n            const parts = msg.data.split('#');\n            const command = parts[1];\n\n            if ([\"REQUEST\", \"PROCEED\", \"INFORM\", \"UPDATE\", \"STATUS\"].includes(command)) {\n                if (command === \"REQUEST\") {\n                    // This cmd is used to generate the input fields where the \"study master\" can input values.\n                    // Ex: TextInput,SliderInput etc.\n                    // cmd type in VSM: Blocking ==> All other execution in VSM scene is halted till the request is\n                    // submitted.\n                    let newInputSheetFieldDetails = {\n                        action: command,\n                        variable: parts[3].split(';'),\n                        options: parts[4].split(';'),\n                        type: parts[5].split(';'),\n                        timestamp: parts[2],\n                        vm_uid: parts[6]         // vm_uid ==> contains information about which thread needs to be\n                                                 // unblocked in VSM\n                    };\n                    setInputSheetFieldDetails(newInputSheetFieldDetails);\n                    let newObj = newInputSheetFieldDetails.variable.reduce((obj, key) => ({...obj, [key]: \"\"}), {})\n                    setUserSubmittedInfo(newObj);\n                    let currTS = genTimeStamp();\n                    let newInfo = {};\n                    newInfo[currTS] = [command, parts[5]];\n                    setInfoLogContents(Object.assign(infoLogContents, newInfo));\n                }\n\n                if (command === \"PROCEED\") {\n                    // This cmd is used to provide some information to the \"study master\" and it generates a button\n                    // that must be clicked by the studymaster for the execution to continue.\n                    // cmd type in VSM: Blocking ==> All other execution in VSM scene is halted till the request is\n                    // submitted.\n                    let currTS = genTimeStamp();\n                    let newInfo = {};\n                    newInfo[currTS] = [command, parts[4]];\n                    setInformContent(parts[4]);\n                    setDispProceedBtn(true);\n                    setProceedBtnUid(parts[6]);\n                    setInfoLogContents(Object.assign(infoLogContents, newInfo));\n                }\n\n                if (command === \"INFORM\") {\n                    // This cmd is used to provide some information to the \"study master\" to read.\n                    // cmd type in VSM: Non-blocking\n                    let currTS = genTimeStamp();\n                    let newInfo = {};\n                    newInfo[currTS] = [command, parts[4]];\n                    setInformContent(parts[4]);\n                    setInfoLogContents(Object.assign(infoLogContents, newInfo));\n                    setDispProceedBtn(false);\n                }\n\n                if (command === \"UPDATE\") {\n                    // This cmd is used to display the updated state of all variables that are declared in VSM.\n                    // This cmd is executed upon update to variables in VSM.\n                    // cmd type in VSM: Non-blocking and is not connected to any node i.e. it works in the background.\n                    let variable = parts[2];\n                    let val = parts[3];\n                    let newVarVal = {}\n                    newVarVal[variable] = [val];\n                    setVsmVarsForDevToolComp(Object.assign(vsmVarsForDevToolComp, newVarVal));\n                }\n\n                if (command === \"STATUS\") {\n                    // This cmd is just a reply from the server to keep the web socket connection alive\n                    // This concept is referred to as the \"ping-pong\" messages exchanged between client\n                    // (studymaster GUI) and server (VSM) to keep the connection alive.\n                    console.log()\n                    ;\n                }\n            } else {\n                console.log(\"Unknown command: \" + command)\n            }\n            setVsmConnectionStatus(true);\n        };\n\n        document.title = \"VSM StudyMaster\";\n        const link = document.querySelector(\"link[rel*='icon']\") || document.createElement('link');\n        link.type = 'image/x-icon';\n        link.rel = 'shortcut icon';\n        link.href = 'http://scenemaker.dfki.de/images/scenemaker/logo.png';\n        document.getElementsByTagName('head')[0].appendChild(link);\n\n        return () => {\n            ws.disconnect();\n        }\n\n        // below eslint comment is to disable a warning about not passing dependencies ==> we do not pass any dependencies\n        // because we want the useEffect hook to be executed only once i.e. we set up only one webSocket for the current\n        // client.\n\n        // eslint-disable-next-line\n    }, []);\n\n    /**\n     * Message from client (i.e. studymaster frontend) that client is alive\n     */\n    function clientAliveMessage() {\n        // This message is sent from the client to keep the web socket connection alive\n        // This concept is referred to as the \"ping-pong\" messages exchanged between the client\n        // (studymaster GUI) and the server (VSM) to keep the connection alive.\n        // console.log(\"Send client alive message to server\");\n        if (webSocket.readyState === WebSocket.OPEN) {\n            webSocket.send(`VSMMessage#STATUS#alive`);\n            setTimeout(clientAliveMessage, 100);\n        }\n    }\n\n    function sendSubmitToVsm() {\n\n        for (let i = 0; i < inputSheetFieldDetails.variable.length; i++) {\n            let variable = inputSheetFieldDetails.variable[i];\n            if (inputSheetFieldDetails.type[i] === \"radio\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"text\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"number\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"checkbox\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n\n                    let checkBoxState = userSubmittedInfo[variable];\n                    if (checkBoxState === \"\"){\n                        checkBoxState = \" \";\n                    }\n\n                    webSocket.send(`VSMMessage#VAR#${variable}#${checkBoxState}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"slider\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            }\n        }\n\n        // vm_uid ==> contains information about which thread needs to be unblocked in VSM\n        webSocket.send(`VSMMessage#VAR#request_result#SUBMIT#` + inputSheetFieldDetails.vm_uid);\n        setInputSheetFieldDetails({\n            action: \"SUCCESSFULSEND\",\n            timestamp: inputSheetFieldDetails.timestamp,\n        })\n        setUserSubmittedInfo(new Map());\n    };\n\n    function sendCancelToVsm() {\n        webSocket.send(`VSMMessage#VAR#request_result#CANCEL#` + inputSheetFieldDetails.vm_uid);\n\n        setInfoLogContents({});\n        setUserSubmittedInfo({});\n        setInputSheetFieldDetails({});\n        setInformContent(\"\");\n        setDispProceedBtn(false);\n        setProceedBtnUid(\"\");\n    };\n\n    function sendProceedToVsm() {\n        webSocket.send(`VSMMessage#VAR#request_result#PROCEED#` + proceedBtnUid);\n\n        setInfoLogContents({});\n        setUserSubmittedInfo({});\n        setInputSheetFieldDetails({});\n        setInformContent(\"\");\n        setDispProceedBtn(false);\n        setProceedBtnUid(\"\");\n    };\n\n\n    return (\n        <div className=\"App\">\n            <div className={collapseDevToolComp ? \"wrapper-collapsed\" : \"wrapper\"}>\n                <div className=\"header box\">\n                    <div className=\"flex-container\">\n\n                        <div className=\"item1\">\n                            <h1>Studymaster</h1>\n                        </div>\n\n                        <div className=\"item2\">\n                            {vsmConnectionStatus ?\n                                <Tooltip disableFocusListener title=\"VSM connected\">\n                                    <LinkIcon style={{fill: \"green\", fontSize: 50}}/>\n                                </Tooltip> :\n                                <Tooltip disableFocusListener title=\"VSM not connected\">\n                                    <LinkOffIcon style={{fill: \"red\", fontSize: 50}}/>\n                                </Tooltip>\n                            }\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"sidebar box\">\n                    <InfoLogUnit vsmVars={vsmVarsForDevToolComp}\n                                 collapseDevToolComp={collapseDevToolComp}\n                                 setCollapseDevToolComp={setCollapseDevToolComp}\n                                 infoLogContents={infoLogContents}\n                    />\n                </div>\n\n                <div className=\"inform box\">\n                    <div className=\"flex-container\">\n                        <div className=\"item1\">\n                            <h2>{informContent}</h2>\n                        </div>\n\n                        {\n                            (dispProceedBtn) &&\n                            <div className=\"item2\">\n                                <div className=\"button-area\">\n                                    <Button variant=\"contained\"\n                                            onClick={() => {\n                                                sendProceedToVsm();\n                                            }}\n                                    >\n                                        <NavigateNextIcon/>\n                                    </Button>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n\n                <div className=\"content box\">\n                    <InputSheetUnit inputSheetFieldDetails={inputSheetFieldDetails}\n                                    setUserSubmittedInfo={setUserSubmittedInfo}\n                                    updateUserSubmittedInfo={updateUserSubmittedInfo}\n                                    sendSubmit={sendSubmitToVsm} sendCancel={sendCancelToVsm}\n                                    userSubmittedInfo={userSubmittedInfo}\n                                    infoLogContents={infoLogContents}\n                                    webSocket={webSocket}\n                    />\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}