{
  "version": 3,
  "sources": [
    "logo.svg",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "App",
    "useState",
    "text",
    "settext",
    "ws",
    "setws",
    "state",
    "setState",
    "useEffect",
    "WebSocket",
    "document",
    "location",
    "host",
    "onopen",
    "onclose",
    "onmessage",
    "msg",
    "console",
    "log",
    "data",
    "parts",
    "split",
    "command",
    "action",
    "variable",
    "options",
    "timestamp",
    "className",
    "onClick",
    "send",
    "onSubmit",
    "e",
    "preventDefault",
    "target",
    "in",
    "value",
    "id",
    "type",
    "res",
    "Array",
    "from",
    "selection",
    "elements",
    "find",
    "i",
    "checked",
    "var",
    "map",
    "option",
    "Boolean",
    "window",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister"
  ],
  "mappings": "wKAAAA,EAAOC,QAAU,IAA0B,kC,oHCuE5BC,MAlEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEOF,qBAFP,mBAENG,EAFM,KAEFC,EAFE,OAGaJ,qBAHb,mBAGNK,EAHM,KAGCC,EAHD,KA0Cb,OAtCAC,qBAAU,WACR,IAAIJ,EAAK,IAAIK,UAAU,QAAUC,SAASC,SAASC,KAAO,OAE1DT,EAAQ,iBACRC,EAAGS,OAAS,WAAaV,EAAQ,eACjCC,EAAGU,QAAU,WAAaX,EAAQ,oBAClCC,EAAGW,UAAY,SAASC,GACtBC,QAAQC,IAAIF,EAAIG,MAChB,IAAMC,EAAQJ,EAAIG,KAAKE,MAAM,KACvBC,EAAUF,EAAM,GACP,YAAZE,GACDf,EAAS,CACPgB,OAAQD,EACRE,SAAUJ,EAAM,GAChBK,QAASL,EAAM,GAAGC,MAAM,KACxBK,UAAWN,EAAM,KAGrBjB,EAAQa,EAAIG,OAEdd,EAAMD,KACN,IAkBA,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAEhB,4BAAQC,QAPd,WACExB,EAAGyB,KAAK,mBAMJ,MACA,0BAAMC,SApBZ,SAAiBC,GACfA,EAAEC,iBACF5B,EAAGyB,KAAKE,EAAEE,OAAOC,GAAGC,SAmBd,2BAAOC,GAAG,OACV,4BAAQC,KAAK,UAAb,QACCnC,GAEAI,GAA2B,YAAjBA,EAAMiB,QACjB,0BAAMO,SAtBd,SAAiBC,GACfA,EAAEC,iBACF,IACMM,EADGC,MAAMC,KAAKT,EAAEE,OAAOQ,UAAUC,UACzBC,MAAK,SAACC,GAAD,OAAOA,EAAEC,WAASV,MAClCG,GACDlC,EAAGyB,KAAH,yBAA0BE,EAAEE,OAAOa,IAAIX,MAAvC,YAAgDG,MAiB5C,WACU,2BAAOH,MAAO7B,EAAMkB,SAAUY,GAAG,QACzC,8BAAUA,GAAG,aACT9B,EAAMmB,QAAQsB,KAAI,SAACC,GAAD,OAAY,oCAAE,2BAAOX,KAAK,QAAQF,MAAOa,IAAS,+BAAQA,QAEhF,8CCnDQC,QACW,cAA7BC,OAAOvC,SAASwC,UAEe,UAA7BD,OAAOvC,SAASwC,UAEhBD,OAAOvC,SAASwC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5C,SAAS6C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB",
  "file": "static/js/main.46d7a24d.chunk.js",
  "sourcesContent": [
    "module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";",
    "import React, { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  const [text, settext] = useState(\"\");\r\n  const [ws, setws] = useState();\r\n  const [state, setState] = useState();\r\n  useEffect(()=>{\r\n    let ws = new WebSocket('ws://' + document.location.host + '/ws');\r\n\r\n    settext('Connecting...')\r\n    ws.onopen = function() { settext('Connected!'); };\r\n    ws.onclose = function() { settext('Lost connection'); };\r\n    ws.onmessage = function(msg) {\r\n      console.log(msg.data)\r\n      const parts = msg.data.split('#');\r\n      const command = parts[1];\r\n      if(command === \"REQUEST\") {\r\n        setState({\r\n          action: command,\r\n          variable: parts[3],\r\n          options: parts[4].split(','),\r\n          timestamp: parts[2]\r\n        })\r\n      }\r\n      settext(msg.data); \r\n    };\r\n    setws(ws);\r\n  },[]);\r\n\r\n  function sendmsg(e) {\r\n    e.preventDefault();\r\n    ws.send(e.target.in.value)\r\n  }\r\n  function sendVar(e) {\r\n    e.preventDefault();\r\n    const x =Array.from(e.target.selection.elements)\r\n    const res = x.find((i) => i.checked).value\r\n    if(res){\r\n      ws.send(`VSMMessage#VAR#${e.target.var.value}#${res}`)\r\n    }\r\n  }\r\n  function sendGo() {\r\n    ws.send(\"VSMMessage#Go\")\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <button onClick={sendGo}>Go</button>\r\n        <form onSubmit={sendmsg}>\r\n          <input id='in'></input>\r\n          <button type='submit'>send</button>\r\n          {text}\r\n        </form>\r\n        { (state && (state.action === \"REQUEST\")) &&\r\n          <form onSubmit={sendVar}>\r\n            For var <input value={state.variable} id=\"var\"></input>\r\n            <fieldset id='selection'>\r\n              { state.options.map((option) => <><input type='radio' value={option}/><label>{option}</label></>)}\r\n            </fieldset>\r\n            <button>submit</button>\r\n          </form>\r\n        }\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
    "// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n",
    "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"
  ],
  "sourceRoot": ""
}