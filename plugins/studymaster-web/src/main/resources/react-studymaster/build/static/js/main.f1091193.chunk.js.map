{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","setConnectionStatusText","WebSocket","document","location","host","webSocket","setWebSocket","formContents","setFormContents","inputValue","Map","generateInputFieldWithType","i","variable","type","name","placeholder","options","id","onChange","e","set","target","value","values","split","map","option","useEffect","ws","onopen","onclose","onmessage","msg","console","log","data","parts","command","action","timestamp","title","link","querySelector","createElement","rel","href","getElementsByTagName","appendChild","className","returnValue","length","inputBoxes","push","generateFields","onClick","preventDefault","allFieldsSet","j","radio_checked","getElementById","checked","alert","has","send","get","extractAndSendUserInput","window","reload","undefined","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1091193.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n    const [connectionStatusText, setConnectionStatusText] = useState(\"\");\r\n    const [webSocket, setWebSocket] = useState(new WebSocket('ws://' + document.location.host + '/ws'));\r\n    const [formContents, setFormContents] = useState();\r\n    const inputValue = new Map();\r\n    useEffect(() => {\r\n        let ws = new WebSocket('ws://' + document.location.host + '/ws');\r\n\r\n        setConnectionStatusText('Connecting...');\r\n        ws.onopen = function () {\r\n            setConnectionStatusText('Connected!');\r\n        };\r\n        ws.onclose = function () {\r\n            setConnectionStatusText('Lost connection');\r\n        };\r\n        ws.onmessage = function (msg) {\r\n            console.log(msg.data);\r\n            const parts = msg.data.split('#');\r\n            const command = parts[1];\r\n            if (command === \"REQUEST\") {\r\n                setFormContents({\r\n                    action: command,\r\n                    variable: parts[3].split(';'),\r\n                    options: parts[4].split(';'),\r\n                    type: parts[5].split(';'),\r\n                    timestamp: parts[2]\r\n                })\r\n            }\r\n            setConnectionStatusText(msg.data);\r\n        };\r\n        setWebSocket(ws);\r\n        document.title = \"VSM StudyMaster\";\r\n        var link = document.querySelector(\"link[rel*='icon']\") || document.createElement('link');\r\n        link.type = 'image/x-icon';\r\n        link.rel = 'shortcut icon';\r\n        link.href = 'http://scenemaker.dfki.de/images/scenemaker/logo.png';\r\n        document.getElementsByTagName('head')[0].appendChild(link);\r\n    }, []);\r\n\r\n\r\n    function sendSubmit(e) {\r\n        let allFieldSet = extractAndSendUserInput(e);\r\n\r\n        if (allFieldSet) {\r\n            webSocket.send(`VSMMessage#VAR#request_result#SUBMIT`);\r\n            setFormContents({\r\n                action: \"SUCCESSFULSEND\",\r\n                timestamp: formContents.timestamp,\r\n            })\r\n        } else {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    function sendCancel() {\r\n        webSocket.send(`VSMMessage#VAR#request_result#CANCEL`);\r\n\r\n        // Resetting form to empty\r\n        setFormContents(undefined);\r\n    }\r\n\r\n    // If submit or cancel button is being pushed:\r\n    // Send all variables with the selected/ written value from user input.\r\n    function extractAndSendUserInput(e) {\r\n        e.preventDefault();\r\n        let allFieldsSet = true;\r\n        let i;\r\n        for (i = 0; i < formContents.variable.length; i++) {\r\n            let variable = formContents.variable[i];\r\n            if (formContents.type[i] === \"radio\") {\r\n                let j;\r\n                let values = formContents.options[i].split(',');\r\n                let radio_checked = false;\r\n                for (j = 0; j < values.length; j++) {\r\n                    let value = values[j];\r\n                    let radioButtonValue = document.getElementById(value);\r\n                    if (radioButtonValue.checked) {\r\n                        radio_checked = true;\r\n                    }\r\n                }\r\n                if (!radio_checked) {\r\n                    alert(\"Please ensure to fill in radio input for \" + formContents.variable[i]);\r\n                    allFieldsSet = false;\r\n                }\r\n            } else if (formContents.type[i] === \"text\") {\r\n                if (!inputValue.has(variable)) {\r\n                    alert(\"Please ensure to fill in text input for \" + formContents.variable[i]);\r\n                    allFieldsSet = false;\r\n                }\r\n            } else if (formContents.type[i] === \"number\") {\r\n                if (!inputValue.has(variable)) {\r\n                    alert(\"Please ensure to fill in number input for \" + formContents.variable[i]);\r\n                    allFieldsSet = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (allFieldsSet) {\r\n            for (i = 0; i < formContents.variable.length; i++) {\r\n                let variable = formContents.variable[i];\r\n                if (formContents.type[i] === \"radio\") {\r\n\r\n                    let j;\r\n                    let values = formContents.options[i].split(',');\r\n                    for (j = 0; j < values.length; j++) {\r\n                        let value = values[j];\r\n                        let radioButtonValue = document.getElementById(value);\r\n                        if (radioButtonValue.checked) {\r\n                            webSocket.send(`VSMMessage#VAR#${variable}#${value}`);\r\n                        }\r\n                    }\r\n                } else if (formContents.type[i] === \"text\") {\r\n                    if (inputValue.has(variable)) {\r\n                        webSocket.send(`VSMMessage#VAR#${variable}#${inputValue.get(variable)}`);\r\n                    }\r\n                } else if (formContents.type[i] === \"number\") {\r\n                    if (inputValue.has(variable)) {\r\n                        webSocket.send(`VSMMessage#VAR#${variable}#${inputValue.get(variable)}`);\r\n                    }\r\n                } else if (formContents.type[i] === \"checkbox\") {\r\n                    if (document.getElementById(variable).checked) {\r\n                        webSocket.send(`VSMMessage#VAR#${variable}#true`);\r\n                    } else {\r\n                        webSocket.send(`VSMMessage#VAR#${variable}#false`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return allFieldsSet\r\n    }\r\n\r\n\r\n    function generateInputFieldWithType(i) {\r\n        let variable = formContents.variable[i];\r\n        if (formContents.type[i] === \"text\") {\r\n            return (\r\n                <>\r\n                    <p>\r\n                        <label> {formContents.variable[i]} </label>\r\n                        <input type=\"text\" name={variable} placeholder={formContents.options[i]} id={variable}\r\n                               onChange={e => inputValue.set(variable, e.target.value)}/>\r\n                    </p>\r\n                </>\r\n            )\r\n        } else if (formContents.type[i] === \"number\") {\r\n            return (\r\n                <>\r\n                    <p>\r\n                        <label> {formContents.variable[i]} </label>\r\n                        <input type=\"number\" name={variable} placeholder={formContents.options[i]} id={variable}\r\n                               onChange={e => inputValue.set(variable, e.target.value)}/>\r\n                    </p>\r\n                </>\r\n            )\r\n        } else if (formContents.type[i] === \"radio\") {\r\n            let values = formContents.options[i].split(',');\r\n            return (\r\n                <>\r\n                    <p>\r\n                        <label> {formContents.variable[i]} </label>\r\n                        {values.map((option) =>\r\n                            <>\r\n                                <input type=\"radio\" id={option} name={variable} value={option}/>\r\n                                <label> {option} </label>\r\n                            </>\r\n                        )}\r\n                    </p>\r\n                </>\r\n            )\r\n        } else if (formContents.type[i] === \"checkbox\") {\r\n            return (\r\n                <>\r\n                    <p>\r\n                        <label> {formContents.variable[i]} </label>\r\n                        <input type=\"checkbox\" id={variable} name={variable} value={formContents.options[i]}/>\r\n                        <label> {formContents.options[i]} </label>\r\n                    </p>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    function generateFields() {\r\n        let returnValue = [];\r\n\r\n        let i;\r\n        for (i = 0; i < formContents.variable.length; i++) {\r\n            let inputBoxes = generateInputFieldWithType(i);\r\n            returnValue.push(inputBoxes);\r\n        }\r\n        return (\r\n            <>\r\n                {returnValue}\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <form>\r\n                    <fieldset>\r\n                        {(formContents && (formContents.action === \"REQUEST\")) && generateFields()}\r\n                        {\r\n                            (formContents && (formContents.action === \"SUCCESSFULSEND\")) &&\r\n                            <div>\r\n                                <h2>Successfully posted!</h2>\r\n                            </div>\r\n                        }\r\n                    </fieldset>\r\n                    {\r\n                        (formContents && (formContents.action === \"REQUEST\")) &&\r\n                        <div>\r\n                            <button onClick={sendSubmit}> submit</button>\r\n                            <button onClick={sendCancel}> cancel</button>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        !(formContents && (formContents.action === \"REQUEST\")) &&\r\n                        <div>\r\n                            <h2>No active requests.</h2>\r\n                        </div>\r\n                    }\r\n                </form>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(< App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}