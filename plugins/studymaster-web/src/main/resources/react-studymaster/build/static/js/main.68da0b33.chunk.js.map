{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","settext","ws","setws","state","setState","inputValue","Map","sendVar","i","variable","length","type","j","values","options","split","value","document","getElementById","checked","send","has","get","inputWithType","name","placeholder","id","onChange","e","set","target","map","option","makeFieldset","useEffect","WebSocket","location","host","onopen","onclose","onmessage","msg","console","log","data","parts","command","action","timestamp","className","onClick","onSubmit","preventDefault","in","returnValue","fieldset","push","returnAllFieldsets","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68da0b33.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  const [text, settext] = useState(\"\");\r\n  const [ws, setws] = useState();\r\n  const [state, setState] = useState();\r\n  const inputValue = new Map();\r\n  useEffect(() => {\r\n    let ws = new WebSocket('ws://' + document.location.host + '/ws');\r\n\r\n    settext('Connecting...');\r\n    ws.onopen = function () {\r\n      settext('Connected!');\r\n    };\r\n    ws.onclose = function () {\r\n      settext('Lost connection');\r\n    };\r\n    ws.onmessage = function (msg) {\r\n      console.log(msg.data);\r\n      const parts = msg.data.split('#');\r\n      const command = parts[1];\r\n      if (command === \"REQUEST\") {\r\n        setState({\r\n          action: command,\r\n          variable: parts[3].split(';'),\r\n          options: parts[4].split(';'),\r\n          type: parts[5].split(';'),\r\n          timestamp: parts[2]\r\n        })\r\n      }\r\n      settext(msg.data);\r\n    };\r\n    setws(ws);\r\n  }, []);\r\n\r\n  function sendmsg(e) {\r\n    e.preventDefault();\r\n    ws.send(e.target.in.value)\r\n  }\r\n\r\n  // If submit button is being pushed:\r\n  // Send all variables with their selected/ written value.\r\n  function sendVar() {\r\n    var i;\r\n    for (i = 0; i < state.variable.length; i++) {\r\n      var variable = state.variable[i];\r\n      if (state.type[i] === \"radio\") {\r\n\r\n        var j;\r\n        var values = state.options[i].split(',');\r\n        for (j = 0; j < values.length; j++) {\r\n          var value = values[j];\r\n          var radioButtonValue = document.getElementById(value);\r\n          if (radioButtonValue.checked) {\r\n            ws.send(`VSMMessage#VAR#${variable}#${value}`);\r\n          }\r\n        }\r\n      } else if (state.type[i] === \"text\") {\r\n        if (inputValue.has(variable)){\r\n          ws.send(`VSMMessage#VAR#${variable}#${inputValue.get(variable)}`);\r\n        }\r\n      } else if (state.type[i] === \"checkbox\") {\r\n        if (document.getElementById(variable).checked) {\r\n          ws.send(`VSMMessage#VAR#${variable}#true`);\r\n        } else {\r\n          ws.send(`VSMMessage#VAR#${variable}#false`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function sendGo() {\r\n    ws.send(\"VSMMessage#Go\")\r\n  }\r\n\r\n  function inputWithType(i) {\r\n    var variable = state.variable[i];\r\n    if (state.type[i] === \"text\") {\r\n      return (\r\n        <>\r\n          <input type=\"text\" name={variable} placeholder={state.options[i]} id={variable} onChange={e => inputValue.set(variable, e.target.value)}/>\r\n        </>\r\n      )\r\n    } else if (state.type[i] === \"radio\") {\r\n      var values = state.options[i].split(',');\r\n      return (\r\n        <>\r\n        {values.map((option) =>\r\n            <label>\r\n              <input type=\"radio\" id={option} name={variable} value={option}/>\r\n                {option}\r\n            </label>\r\n        )}\r\n        </>\r\n      )\r\n    } else if (state.type[i] === \"checkbox\") {\r\n      return (\r\n          <>\r\n            <label>\r\n              <input type=\"checkbox\" id={variable} name={variable} value={state.options[i]}/>\r\n              {state.options[i]}\r\n            </label>\r\n          </>\r\n      )\r\n    }\r\n  }\r\n\r\n  function makeFieldset(i) {\r\n    return (\r\n      <>\r\n        For variable <input value = {state.variable[i]} id = \"var\" />\r\n        <fieldset id='selection'>\r\n          {inputWithType(i)}\r\n        </fieldset>\r\n      </>\r\n    )\r\n  }\r\n\r\n  function returnAllFieldsets() {\r\n    var returnValue = [];\r\n\r\n    var i;\r\n    for (i = 0; i < state.variable.length; i++) {\r\n      var fieldset = makeFieldset(i);\r\n      returnValue.push(fieldset);\r\n    }\r\n    return (\r\n        <form onSubmit={sendVar}>\r\n          {returnValue}\r\n          <button> submit </button>\r\n        </form>\r\n    )\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n      <button onClick={sendGo}> Go </button>\r\n      <form onSubmit={sendmsg}>\r\n        <input id = 'in' />\r\n        <button type='submit'> send </button>\r\n        {text}\r\n      </form>\r\n      {(state && (state.action === \"REQUEST\")) && returnAllFieldsets()}\r\n    </header>\r\n    </div>\r\n  )\r\n  ;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / >, document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}