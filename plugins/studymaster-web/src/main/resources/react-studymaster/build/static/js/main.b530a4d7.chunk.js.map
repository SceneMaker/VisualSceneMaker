{"version":3,"sources":["components/utils/basicTable.js","components/infoLogUnit.js","components/inputSingleField2.js","components/inputAllFields.js","components/inputSheetUnit.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","palette","common","black","color","white","body","fontSize","root","borderBottom","StyledTableRow","TableRow","action","hover","border","BasicTable","props","TableContainer","component","Paper","Table","sx","size","TableHead","colNames","map","name","index","TableBody","Object","keys","colVals","key","scope","vals","idx","InfoLogUnit","useState","open","setOpen","className","Button","onClick","setCollapseDevToolComp","collapseDevToolComp","Tooltip","disableFocusListener","title","Collapse","in","dimension","style","height","vsmVars","console","log","infoLogContents","GenerateInputFieldWithType","updateUserSubmittedInfo","formContents","currIdx","error","variable","values","options","split","reduce","a","v","checkBoxState","setCheckBoxState","type","Row","marginTop","marginBottom","InputLabel","focused","htmlFor","TextField","variant","label","value","userSubmittedInfo","id","onChange","e","target","helperText","InputProps","inputProps","min","max","FormControl","undefined","RadioGroup","option","Form","Check","FormHelperText","FormControlLabel","control","Checkbox","defaultValue","newCheckBoxState","checked","newCheckBoxStateArr","filter","k","updateCheckBoxAndUserInfo","GenerateFields","fieldsForUserForm","inputSheetFieldDetails","i","length","currField","formFillingErrors","push","field","InputSheetUnit","setFormFillingErrors","validateForm","unfilledFields","sort","errors","forEach","unfilledField","reqdVars","sortedReqdVars","sortedFilledVars","x","includes","marginLeft","setUserSubmittedInfo","Grid","container","spacing","direction","alignItems","justifyContent","item","xs","Stack","textAlign","borderRadius","padding","width","sendSubmit","startIcon","sendCancel","App","vsmConnectionStatus","setVsmConnectionStatus","webSocket","WebSocket","document","location","host","setInfoLogContents","informContent","setInformContent","setInputSheetFieldDetails","vsmVarsForDevToolComp","setVsmVarsForDevToolComp","items","setupWebSocketForGUI","ws","onopen","clientAliveMessage","onclose","msg","err_msg","onmessage","parts","data","command","newInputSheetFieldDetails","timestamp","newObj","obj","newInfo","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","genTimeStamp","assign","val","newVarVal","link","querySelector","createElement","rel","href","getElementsByTagName","appendChild","readyState","OPEN","send","setTimeout","useEffect","fill","hasOwnProperty","Map","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8XAYMA,EAAkBC,YAAOC,IAAPD,EAAkB,kBAAEE,EAAF,EAAEA,MAAF,sCAChCC,IAAiBC,MAAS,CAC5BC,gBAAiBH,EAAMI,QAAQC,OAAOC,MACtCC,MAAOP,EAAMI,QAAQC,OAAOG,QAHM,0BAKhCP,IAAiBQ,MAAS,CAC5BC,SAAU,KANwB,0BAQhCT,IAAiBU,MAAS,CAC5BC,aAAc,SAToB,KAapCC,EAAiBf,YAAOgB,IAAPhB,EAAiB,kBAAc,CAClD,qBAAsB,CAClBK,gBAFgC,EAAEH,MAEXI,QAAQW,OAAOC,OAE1C,mCAAoC,CAChCC,OAAQ,OAgDDC,EA5CI,SAACC,GAGhB,OACI,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,CAAOC,GAAI,GAERC,KAAK,QAAQ,aAAW,eAF3B,UAGI,cAACC,EAAA,EAAD,UACI,cAACb,EAAD,UAEQM,EAAMQ,SAASC,KAAI,SAACC,EAAMC,GAAP,OACf,cAACjC,EAAD,UAA8BgC,GAARC,UAKtC,cAACC,EAAA,EAAD,UAEQC,OAAOC,KAAKd,EAAMe,SAASN,KAAI,SAACO,EAAKL,GAAN,OAC3B,eAACjB,EAAD,CAEIW,GAAI,CAAC,mCAAoC,CAACP,OAAQ,IAFtD,UAII,cAACpB,EAAD,CAAiBwB,UAAU,KAAKe,MAAM,MAAtC,SACKD,IAGDhB,EAAMe,QAAQC,GAAKP,KAAI,SAACS,EAAMC,GAAP,OACnB,cAACzC,EAAD,UAEKwC,GADiBC,QATzBR,c,kBC6BtBS,EA7EK,SAACpB,GACjB,MAAwBqB,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,sBAAKC,UAAU,kBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,eAACC,EAAA,EAAD,CACIC,QAAS,WACL1B,EAAM2B,wBAAwB3B,EAAM4B,qBACpCL,GAASD,IAEb,gBAAc,wBACd,gBAAeA,EANnB,UASSA,GACD,gCACI,cAAC,IAAD,IADJ,uBAKEA,GACF,cAACO,EAAA,EAAD,CAASC,sBAAoB,EAACC,MAAM,kBAApC,SACI,cAAC,IAAD,WAOhB,qBAAKP,UAAU,gBAAf,SAEI,cAACQ,EAAA,EAAD,CAAUC,GAAIX,EAAMY,UAAU,QAA9B,SACI,oDAEI,uBACA,qBAAKV,UAAWF,EAAO,SAAW,GAAIa,MAAO,CAACC,OAAQ,OAAQhD,MAAO,SAArE,SAEI,cAAC,EAAD,CACIoB,SAAU,CAAC,YAAa,SAAUO,QAASf,EAAMqC,mBAOrE,qBAAKb,UAAU,MAAf,SAEI,cAACQ,EAAA,EAAD,CAAUC,GAAIX,EAAMY,UAAU,QAA9B,SACI,8CAGI,eAACT,EAAA,EAAD,CACIC,QAAS,WACLY,QAAQC,IAAI,mBAFpB,UAKI,cAAC,IAAD,IALJ,oBAQA,uBACA,qBAAKf,UAAWF,EAAO,SAAW,GAAIa,MAAO,CAACC,OAAQ,OAAQhD,MAAO,SAArE,SAEI,cAAC,EAAD,CACIoB,SAAU,CAAC,YAAa,aAAcO,QAASf,EAAMwC,+B,yFCqGtEC,MAnKf,SAAoCzC,EAAO0C,EAAyBC,EAAcC,EAASC,GAGvF,IAAIC,EAAWH,EAAaG,SAASF,GAEjCG,EAASJ,EAAaK,QAAQJ,GAASK,MAAM,KAEjD,EAA0C5B,mBAAS0B,EAAOG,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAcD,GAAf,kBAAmBC,GAAI,MAAS,KAAjG,mBAAOC,EAAP,KAAsBC,EAAtB,KAkBA,OACI,gCAEwC,SAA/BX,EAAaY,KAAKX,IACnB,eAACY,EAAA,EAAD,CAAKrB,MAAO,CACRsB,UAAW,OACXC,aAAc,QAFlB,UAII,cAACC,EAAA,EAAD,CAAYvE,MAAM,UAAUwE,SAAS,EAAMC,QAASf,EACxCX,MAAO,CACHuB,aAAc,QAF9B,SAKKf,EAAaG,SAASF,KAE3B,cAACkB,EAAA,EAAD,aAAWC,QAAQ,WAAWrD,KAAMoC,EACzBkB,MAAOrB,EAAaK,QAAQJ,GAC5BqB,MAAOjE,EAAMkE,kBAAkBpB,IAAa,GAC5CqB,GAAIrB,EACJsB,SAAU,SAAAC,GACN3B,EAAwBI,EAAUuB,EAAEC,OAAOL,SAE1CpB,EAAMC,IAAa,CACpBD,OAAO,EACP0B,WAAY1B,EAAMC,SAML,WAA/BH,EAAaY,KAAKX,IACnB,eAACY,EAAA,EAAD,CAAKrB,MAAO,CACRsB,UAAW,OACXC,aAAc,QAFlB,UAII,cAACC,EAAA,EAAD,CAAYvE,MAAM,UAAUwE,SAAS,EAAMC,QAASf,EACxCX,MAAO,CACHuB,aAAc,QAF9B,SAKKf,EAAaG,SAASF,KAE3B,cAACkB,EAAA,EAAD,aACIP,KAAK,SAASpB,MAAO,CAAC,MAAS,SAAUzB,KAAMoC,EAC/C0B,WAAY,CAACC,WAAY,CAACC,IAAK,EAAGC,IAAK,MACvCX,MAAOrB,EAAaK,QAAQJ,GAC5BuB,GAAIrB,EACJmB,MAAOjE,EAAMkE,kBAAkBpB,IAAa,GAC5CsB,SAAU,SAAAC,GAAC,OAAI3B,EAAwBI,EAAUuB,EAAEC,OAAOL,SACrDpB,EAAMC,IAAa,CACpBD,OAAO,EACP0B,WAAY1B,EAAMC,SAME,UAA/BH,EAAaY,KAAKX,IACnB,eAACY,EAAA,EAAD,CAAKrB,MAAO,CACRsB,UAAW,OACXC,aAAc,QAFlB,UAII,cAACC,EAAA,EAAD,CAAYvE,MAAM,UAAUwE,SAAS,EAAMC,QAASf,EACxCX,MAAO,CACHuB,aAAc,QAF9B,SAKKf,EAAaG,SAASF,KAE3B,cAACY,EAAA,EAAD,UACI,cAACoB,EAAA,EAAD,CACI/B,WAA2BgC,IAApBhC,EAAMC,GADjB,SAGI,eAACgC,EAAA,EAAD,CACI,aAAYnC,EAAaG,SAASF,GAClClC,KAAK,sBAFT,UAKKqC,EAAOtC,KAAI,SAACsE,GAAD,OACR,cAACC,EAAA,EAAKC,MAAN,CAEIvE,KAAM,SACN6C,KAAM,QACNS,MAAOe,EACPd,MAAOc,GAAU,GACjBX,SAAU,SAAAC,GACN3B,EAAwBI,EAAUuB,EAAEC,OAAOL,SAN1Cc,MAUb,cAACG,EAAA,EAAD,UAAiBrC,EAAMC,eAQP,aAA/BH,EAAaY,KAAKX,IACnB,eAACY,EAAA,EAAD,CAAKrB,MAAO,CACRsB,UAAW,OACXC,aAAc,QAFlB,UAII,cAACC,EAAA,EAAD,CAAYvE,MAAM,UAAUwE,SAAS,EAAMC,QAASf,EACxCX,MAAO,CACHuB,aAAc,QAF9B,SAKKf,EAAaG,SAASF,KAG3B,eAACgC,EAAA,EAAD,CACI/B,WAA2BgC,IAApBhC,EAAMC,GADjB,UAGKC,EAAOtC,KAAI,SAACsE,GAAD,OACR,cAACI,EAAA,EAAD,CAEInB,MAAOe,EACPK,QACI,cAACC,EAAA,EAAD,CACIC,cAAc,EACd5E,KAAMqE,EACN3F,MAAM,UACNgF,SAAU,SAAAC,IA1I9C,SAAmCvB,EAAUuB,GAEzC,IAAIkB,EAAgB,2BACblC,GADa,kBAEfgB,EAAEC,OAAO5D,KAAO2D,EAAEC,OAAOkB,UAG9BlC,EAAiBiC,GAIjB,IAAIE,EAAsB5E,OAAOC,KAAKyE,GAAkBG,QAAO,SAAAC,GAAC,OAA4B,IAAxBJ,EAAiBI,MACrFjD,EAAwBI,EAAU2C,GA+HEG,CAA0B9C,EAAUuB,OAR3CU,MAcb,cAACG,EAAA,EAAD,UAAiBrC,EAAMC,eCrIhC+C,MA3Bf,SAAwB7F,GAEpB,IAAI8F,EAAoB,GAExB,GAAI9F,EAAM+F,wBAAmE,YAAxC/F,EAAM+F,uBAAuBnG,OAC9D,IAAK,IAAIoG,EAAI,EAAGA,EAAIhG,EAAM+F,uBAAuBjD,SAASmD,OAAQD,IAAK,CACnE,IAAIE,EAAYzD,EAA2BzC,EAAOA,EAAM0C,wBACpD1C,EAAM+F,uBAAwBC,EAAGhG,EAAMmG,mBAC3CL,EAAkBM,KAAKF,GAK/B,OACI,8BACKJ,EAAkBrF,KAAI,SAAC4F,EAAO1F,GAAR,OACnB,8BAGK0F,GAFI1F,S,+DC2GV2F,MAzHf,SAAwBtG,GAEpB,MAAkDqB,mBAAS,IAA3D,mBAAO8E,EAAP,KAA0BI,EAA1B,KAEA,SAASC,IAEL,GAAqC,IAAjCxG,EAAMkE,kBAAkB5D,KAAY,CACpC,IAAImG,EAAiB,YAAIzG,EAAM+F,uBAAuBjD,UAAU4D,OAC5DC,EAAS,GAMb,OALAF,EAAeG,SAAQ,SAAUC,GACzBF,EAAOE,GAAiB,eAAiBA,KAGjDN,EAAqBI,IACd,EACJ,GAAI,YAAI9F,OAAOC,KAAKd,EAAMkE,oBAAoB+B,OAAS,EAAG,CAG7D,IADA,IAAIa,EAAW,GACNd,EAAI,EAAGA,EAAIhG,EAAM+F,uBAAuBjD,SAASmD,OAAQD,IACjB,aAAzChG,EAAM+F,uBAAuBxC,KAAKyC,IAClCc,EAASV,KAAKpG,EAAM+F,uBAAuBjD,SAASkD,IAI5D,IAAIe,EAAiB,UAAID,GAAUJ,OAC/BM,EAAmB,YAAInG,OAAOC,KAAKd,EAAMkE,oBAAoBwC,OACjEM,EAAmBA,EAAiBtB,QAAO,SAAAuB,GAAC,MAAmC,KAA/BjH,EAAMkE,kBAAkB+C,MAExE,IAAIR,EAAiBM,EAAerB,QAAO,SAAAuB,GAAC,OAAKD,EAAiBE,SAASD,MAEvEN,EAAS,GAOb,GANAF,EAAeG,SAAQ,SAAUC,GACzBF,EAAOE,GAAiB,eAAiBA,KAGjDN,EAAqBI,GAES,IAA1BF,EAAeR,OACf,OAAO,GAanB,OACI,sBAAKzE,UAAU,2BAAf,UACI,sBAAMW,MAAO,CACTgF,WAAY,OADhB,SAGI,qBAAK3F,UAAU,iBAAf,SACI,qCACMxB,EAAM+F,wBAAmE,YAAxC/F,EAAM+F,uBAAuBnG,OAChE,cAAC,EAAD,CAAgBsE,kBAAmBlE,EAAMkE,kBACzBkD,qBAAsBpH,EAAMoH,qBAC5B1E,wBAAyB1C,EAAM0C,wBAC/BqD,uBAAwB/F,EAAM+F,uBAC9BS,aAAcA,EACdL,kBAAmBA,IAI9BnG,EAAM+F,wBAAmE,mBAAxC/F,EAAM+F,uBAAuBnG,QAC/D,8BACI,oBAAIuC,MAAO,CAAC/C,MAAO,SAAnB,2CAMpB,+BACI,sBAAKoC,UAAU,kBAAf,UAESxB,EAAM+F,wBAAmE,YAAxC/F,EAAM+F,uBAAuBnG,QAC/D,cAACyH,EAAA,EAAD,CAAMC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,eAAe,SAJrB,SAMI,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,eAACC,EAAA,EAAD,CAAOL,UAAU,MAAMD,QAAS,EAAGpF,MAAO,CAAC2F,UAAW,UAAtD,UACI,cAAC,IAAD,CAAQ3F,MAAO,CACX4F,aAAc,GACd/I,gBAAiB,QACjBgJ,QAAS,YACTzI,SAAU,OACV0I,MAAO,QACRlE,QAAQ,YACHrC,QApDxC,WAEQ8E,MACAxG,EAAMkI,aACN5F,QAAQC,IAAIvC,EAAMwC,mBAgD8C2F,UAAW,cAAC,IAAD,IAPnD,qBAQA,cAAC,IAAD,CAAQhG,MAAO,CACX4F,aAAc,GACd/I,gBAAiB,MACjBgJ,QAAS,YACTzI,SAAU,OACV0I,MAAO,QACRlE,QAAQ,YAAY3E,MAAM,QACrBsC,QAAS1B,EAAMoI,WAAYD,UAAW,cAAC,IAAD,IAP9C,8BAcVnI,EAAM+F,wBAAmE,YAAxC/F,EAAM+F,uBAAuBnG,SAChE,8BACI,mBAAGuC,MAAO,CAAC/C,MAAO,SAAlB,4C,oCC2HbiJ,OAlOf,WACI,MAAsDhH,oBAAS,GAA/D,mBAAOiH,EAAP,KAA4BC,EAA5B,KACIC,EAAY,IAAIC,UAAU,QAAUC,SAASC,SAASC,KAAO,OACjE,EAA8CvH,mBAAS,CACnD,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,EAAK,CAAC,QACN,GAAM,CAAC,QACP,GAAM,CAAC,QACP,GAAM,CAAC,UAZX,mBAAOmB,EAAP,KAAwBqG,EAAxB,KAcA,EAA0CxH,mBAAS,IAAnD,mBAAOyH,EAAP,KAAsBC,EAAtB,KACA,EAA4D1H,qBAA5D,mBAAO0E,EAAP,KAA+BiD,EAA/B,KACA,EAAsD3H,oBAAS,GAA/D,mBAAOO,EAAP,KAA4BD,EAA5B,KACA,EAA0DN,mBAAS,IAAnE,mBAAO4H,EAAP,KAA8BC,EAA9B,KACA,EAAkD7H,mBAAS,IAA3D,mBAAO6C,EAAP,KAA0BkD,EAA1B,KAIM1E,EAA0B,SAACiD,EAAGvC,GAChC,IAAI+F,EAAK,eAAOjF,GAChBiF,EAAMxD,GAAKvC,EACXgE,EAAqB+B,IAInBC,EAAuB,WACzB,IAAIC,EAAKb,EAETa,EAAGC,OAAS,WACRf,GAAuB,GACvBgB,IACAjH,QAAQC,IAAI,oCAGhB8G,EAAGG,QAAU,SAAUC,GACnBlB,GAAuB,GACvBM,EAAmB,IACnBzB,EAAqB,IACrB4B,EAA0B,IAC1BD,EAAiB,IACjB,IAAIW,EAAU,uFACdpH,QAAQC,IAAImH,GACZX,EAAiBW,IAGrBL,EAAGM,UAAY,SAAUF,GACrB,IAAMG,EAAQH,EAAII,KAAK5G,MAAM,KACvB6G,EAAUF,EAAM,GACtB,GAAgB,YAAZE,EAAuB,CACvB,IAAIC,EAA4B,CAC5BnK,OAAQkK,EACRhH,SAAU8G,EAAM,GAAG3G,MAAM,KACzBD,QAAS4G,EAAM,GAAG3G,MAAM,KACxBM,KAAMqG,EAAM,GAAG3G,MAAM,KACrB+G,UAAWJ,EAAM,IAGrBZ,EAA0Be,GAC1B,IAAIE,EAASF,EAA0BjH,SAASI,QAAO,SAACgH,EAAKlJ,GAAN,mBAAC,eAAkBkJ,GAAnB,kBAAyBlJ,EAAM,OAAM,IAC5FoG,EAAqB6C,QAClB,GAAgB,WAAZH,EAAsB,CAC7B,IACIK,EAAU,GACdA,EA7EhB,WACI,IAAIC,EAAQ,IAAIC,KAGhB,OAFgBD,EAAME,cAAgB,KAAOF,EAAMG,WAAa,GAAK,IAAMH,EAAMI,UAAY,IACzFJ,EAAMK,WAAa,IAAML,EAAMM,aAAe,IAAMN,EAAMO,aAwErCC,IAEK,CAAChB,EAAM,IACzBb,EAAiBa,EAAM,IAEvBf,EAAmBhI,OAAOgK,OAAOrI,EAAiB2H,SAC/C,GAAgB,WAAZL,EAAsB,CAC7B,IAAIhH,EAAW8G,EAAM,GACjBkB,EAAMlB,EAAM,GACZmB,EAAY,GAChBA,EAAUjI,GAAY,CAACgI,GACvB5B,EAAyBrI,OAAOgK,OAAO5B,EAAuB8B,SAE9DzI,QAAQC,IAAI,oBAAsBuH,EAAU,KAEhDvB,GAAuB,IAE3BG,SAAS3G,MAAQ,kBACjB,IAAMiJ,EAAOtC,SAASuC,cAAc,sBAAwBvC,SAASwC,cAAc,QACnFF,EAAKzH,KAAO,eACZyH,EAAKG,IAAM,gBACXH,EAAKI,KAAO,uDACZ1C,SAAS2C,qBAAqB,QAAQ,GAAGC,YAAYN,IAYzD,SAASzB,IAEDf,EAAU+C,aAAe9C,UAAU+C,OACnChD,EAAUiD,KAAV,2BACAC,WAAWnC,EAAoB,MAqEvC,OAlFAoC,qBAAU,WACNvC,MAED,IAgFC,qBAAK5H,UAAU,MAAf,SACI,sBAAKA,UAAWI,EAAsB,oBAAsB,UAA5D,UACI,qBAAKJ,UAAU,aAAf,SACI,sBAAKA,UAAU,iBAAf,UAEI,qBAAKA,UAAU,QAAf,SACI,+CAEJ,qBAAKA,UAAU,QAAf,SACK8G,EACG,cAACzG,EAAA,EAAD,CAASC,sBAAoB,EAACC,MAAM,gBAApC,SACI,cAAC,IAAD,CAAUI,MAAO,CAACyJ,KAAM,QAASrM,SAAU,QAE/C,cAACsC,EAAA,EAAD,CAASC,sBAAoB,EAACC,MAAM,oBAApC,SACI,cAAC,IAAD,CAAaI,MAAO,CAACyJ,KAAM,MAAOrM,SAAU,eAOhE,qBAAKiC,UAAU,cAAf,SACI,cAAC,EAAD,CAAaa,QAAS4G,EACTrH,oBAAqBA,EACrBD,uBAAwBA,EACxBa,gBAAiBA,MAIlC,qBAAKhB,UAAU,aAAf,SACI,qBAAKA,UAAU,GAAf,SACI,6BAAKsH,QAIb,qBAAKtH,UAAU,cAAf,SACI,cAAC,EAAD,CAAgBuE,uBAAwBA,EACxBqB,qBAAsBA,EACtB1E,wBAAyBA,EACzBwF,WAxGhC,WAGI,IAAK,IAAIlC,EAAI,EAAGA,EAAID,EAAuBjD,SAASmD,OAAQD,IAAK,CAC7D,IAAIlD,EAAWiD,EAAuBjD,SAASkD,GACR,UAAnCD,EAAuBxC,KAAKyC,IAIc,SAAnCD,EAAuBxC,KAAKyC,IAIO,WAAnCD,EAAuBxC,KAAKyC,GAP/B9B,EAAkB2H,eAAe/I,IACjC0F,EAAUiD,KAAV,yBAAiC3I,EAAjC,YAA6CoB,EAAkBpB,KAUzB,aAAnCiD,EAAuBxC,KAAKyC,IAC/B9B,EAAkB2H,eAAe/I,IACjC0F,EAAUiD,KAAV,yBAAiC3I,EAAjC,YAA6CoB,EAAkBpB,KAK3E0F,EAAUiD,KAAV,wCACAzC,EAA0B,CACtBpJ,OAAQ,iBACRoK,UAAWjE,EAAuBiE,YAEtC5C,EAAqB,IAAI0E,MA2EgC1D,WAxE7D,WACII,EAAUiD,KAAV,wCACAnJ,QAAQC,IAAI,cACZ,IAAK,IAAIyD,EAAI,EAAGA,EAAID,EAAuBjD,SAASmD,OAAQD,IAAK,CAC7D,IAAIlD,EAAWiD,EAAuBjD,SAASkD,GAC/C,GAAuC,UAAnCD,EAAuBxC,KAAKyC,GACxB9B,EAAkB2H,eAAe/I,IACjCJ,EAAwBI,EAAU,SAEnC,GAAuC,SAAnCiD,EAAuBxC,KAAKyC,GAC/B9B,EAAkB2H,eAAe/I,IACjCJ,EAAwBI,EAAU,SAGnC,GAAuC,WAAnCiD,EAAuBxC,KAAKyC,GAC/B9B,EAAkB2H,eAAe/I,IACjCJ,EAAwBI,EAAU,SAGnC,GAAuC,aAAnCiD,EAAuBxC,KAAKyC,IAC/B9B,EAAkB2H,eAAe/I,GAAW,CAC5C,IAAIC,EAASgD,EAAuB/C,QAAQgD,GAAG/C,MAAM,KACrDP,EAAwBI,EAAUC,EAAOG,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAcD,GAAf,kBAAmBC,GAAI,MAAS,QAmDhEc,kBAAmBA,EACnB1B,gBAAiBA,YC7NjCuJ,QACa,cAA7BC,OAAOrD,SAASsD,UAEa,UAA7BD,OAAOrD,SAASsD,UAEhBD,OAAOrD,SAASsD,SAASC,MACrB,2DCbRC,IAASC,OAAO,cAAE,GAAF,IAAU1D,SAAS2D,eAAe,SD8H1C,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.b530a4d7.chunk.js","sourcesContent":["import * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport {styled} from '@mui/material/styles';\nimport {tableCellClasses} from '@mui/material/TableCell';\n\n\nconst StyledTableCell = styled(TableCell)(({theme}) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n    [`&.${tableCellClasses.root}`]: {\n        borderBottom: \"none\"\n    }\n}));\n\nconst StyledTableRow = styled(TableRow)(({theme}) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nconst BasicTable = (props) => {\n\n\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{\n                // minWidth: 650\n            }} size=\"small\" aria-label=\"simple table\">\n                <TableHead>\n                    <StyledTableRow>\n                        {\n                            props.colNames.map((name, index) => (\n                                <StyledTableCell key={index}>{name}</StyledTableCell>\n                            ))\n                        }\n                    </StyledTableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        Object.keys(props.colVals).map((key, index) => (\n                            <StyledTableRow\n                                key={index}\n                                sx={{'&:last-child td, &:last-child th': {border: 0}}}\n                            >\n                                <StyledTableCell component=\"th\" scope=\"row\">\n                                    {key}\n                                </StyledTableCell>\n                                {\n                                    props.colVals[key].map((vals, idx) => (\n                                        <StyledTableCell\n                                                         key={idx}>\n                                            {vals}\n                                        </StyledTableCell>\n                                    ))\n                                }\n                            </StyledTableRow>\n                        ))\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default BasicTable;","import {Button} from \"react-bootstrap\";\nimport React, {useState} from \"react\";\nimport DeveloperModeIcon from '@mui/icons-material/DeveloperMode';\nimport {Collapse, Tooltip} from \"@material-ui/core\";\nimport BasicTable from \"./utils/basicTable\";\nimport DownloadIcon from '@mui/icons-material/Download';\n\nconst InfoLogUnit = (props) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <div className=\"sidebar-divider\">\n            <div className=\"button-area\">\n                <Button\n                    onClick={() => {\n                        props.setCollapseDevToolComp(!props.collapseDevToolComp);\n                        setOpen(!open);\n                    }}\n                    aria-controls=\"example-collapse-text\"\n                    aria-expanded={open}\n                >\n                    {\n                        (open) &&\n                        <div>\n                            <DeveloperModeIcon/> Developer Tools\n                        </div>\n                    }\n                    {\n                        (!open) &&\n                        <Tooltip disableFocusListener title=\"Developer Tools\">\n                            <DeveloperModeIcon/>\n                        </Tooltip>\n\n                    }\n                </Button>\n            </div>\n\n            <div className=\"variable-list\">\n                {/*<div className={open ? \"logbox\" : \"\"} style={{minHeight: '35vh', color: 'white'}}>*/}\n                <Collapse in={open} dimension=\"width\">\n                    <div>\n                        VSM Variable List\n                        <hr/>\n                        <div className={open ? \"logbox\" : \"\"} style={{height: '35vh', color: 'white'}}>\n\n                            <BasicTable\n                                colNames={[\"Variables\", \"Value\"]} colVals={props.vsmVars}/>\n                        </div>\n                    </div>\n                </Collapse>\n                {/*</div>*/}\n            </div>\n\n            <div className=\"log\">\n                {/*<div className={open ? \"logbox\" : \"\"} style={{minHeight: '35vh', color: 'white'}}>*/}\n                <Collapse in={open} dimension=\"width\">\n                    <div>\n                        Log history\n\n                        <Button\n                            onClick={() => {\n                                console.log(\"Downloading...\")\n                            }}\n                        >\n                            <DownloadIcon/> Download logs\n                        </Button>\n\n                        <hr/>\n                        <div className={open ? \"logbox\" : \"\"} style={{height: '35vh', color: 'white'}}>\n\n                            <BasicTable\n                                colNames={[\"Timestamp\", \"InformCmd\"]} colVals={props.infoLogContents}/>\n\n                        </div>\n                    </div>\n                </Collapse>\n                {/*</div>*/}\n            </div>\n\n        </div>\n\n    )\n};\n\nexport default InfoLogUnit;","import {Row} from \"react-bootstrap\";\nimport React, {useState} from \"react\";\nimport {FormHelperText, TextField} from \"@mui/material\";\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport {Checkbox, InputLabel} from \"@material-ui/core\";\nimport {Form} from \"react-bootstrap\";\n\nfunction GenerateInputFieldWithType(props, updateUserSubmittedInfo, formContents, currIdx, error) {\n\n\n    let variable = formContents.variable[currIdx];\n\n    let values = formContents.options[currIdx].split(',');\n\n    const [checkBoxState, setCheckBoxState] = useState(values.reduce((a, v) => ({...a, [v]: false}), {}));\n\n\n    function updateCheckBoxAndUserInfo(variable, e) {\n\n        let newCheckBoxState = {\n            ...checkBoxState,\n            [e.target.name]: e.target.checked,\n        }\n\n        setCheckBoxState(newCheckBoxState)\n\n        // console.log(Object.keys(newCheckBoxState).filter(k => newCheckBoxState[k] === true));\n\n        let newCheckBoxStateArr = Object.keys(newCheckBoxState).filter(k => newCheckBoxState[k] === true);\n        updateUserSubmittedInfo(variable, newCheckBoxStateArr);\n    }\n\n    return (\n        <div>\n            {\n                (formContents.type[currIdx] === \"text\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n                    <TextField variant=\"standard\" name={variable}\n                               label={formContents.options[currIdx]}\n                               value={props.userSubmittedInfo[variable] || ''}\n                               id={variable}\n                               onChange={e => {\n                                   updateUserSubmittedInfo(variable, e.target.value);\n                               }}\n                               {...(error[variable] && {\n                                   error: true,\n                                   helperText: error[variable]\n                               })}\n                    />\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"number\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n                    <TextField\n                        type=\"number\" style={{\"width\": \"150px\"}} name={variable}\n                        InputProps={{inputProps: {min: 0, max: 1000}}}\n                        label={formContents.options[currIdx]}\n                        id={variable}\n                        value={props.userSubmittedInfo[variable] || ''}\n                        onChange={e => updateUserSubmittedInfo(variable, e.target.value)}\n                        {...(error[variable] && {\n                            error: true,\n                            helperText: error[variable]\n                        })}\n                    />\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"radio\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n                    <Row>\n                        <FormControl\n                            error={error[variable] !== undefined}\n                        >\n                            <RadioGroup\n                                aria-label={formContents.variable[currIdx]}\n                                name=\"radio-buttons-group\"\n                            >\n\n                                {values.map((option) =>\n                                    <Form.Check\n                                        key={option}\n                                        name={\"group1\"}\n                                        type={\"radio\"}\n                                        label={option}\n                                        value={option || ''}\n                                        onChange={e => {\n                                            updateUserSubmittedInfo(variable, e.target.value);\n                                        }}\n                                    />\n                                )}\n                                <FormHelperText>{error[variable]}</FormHelperText>\n                            </RadioGroup>\n                        </FormControl>\n\n                    </Row>\n                </Row>\n            }\n            {\n                (formContents.type[currIdx] === \"checkbox\") &&\n                <Row style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\"\n                }}>\n                    <InputLabel color='primary' focused={true} htmlFor={variable}\n                                style={{\n                                    marginBottom: \"10px\"\n                                }}\n                    >\n                        {formContents.variable[currIdx]}\n                    </InputLabel>\n\n                    <FormControl\n                        error={error[variable] !== undefined}\n                    >\n                        {values.map((option) =>\n                            <FormControlLabel\n                                key={option}\n                                label={option}\n                                control={\n                                    <Checkbox\n                                        defaultValue={false}\n                                        name={option}\n                                        color=\"default\"\n                                        onChange={e => {\n                                            updateCheckBoxAndUserInfo(variable, e);\n                                        }}\n                                    />\n                                }\n                            />\n                        )}\n                        <FormHelperText>{error[variable]}</FormHelperText>\n                    </FormControl>\n                </Row>\n            }\n        </div>\n    )\n}\n\nexport default GenerateInputFieldWithType;","import React from \"react\";\nimport GenerateInputFieldWithType from \"./inputSingleField2\";\n\n\nfunction GenerateFields(props) {\n\n    let fieldsForUserForm = [];\n\n    if (props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\")) {\n        for (let i = 0; i < props.inputSheetFieldDetails.variable.length; i++) {\n            let currField = GenerateInputFieldWithType(props, props.updateUserSubmittedInfo,\n                props.inputSheetFieldDetails, i, props.formFillingErrors);\n            fieldsForUserForm.push(currField);\n        }\n    }\n\n\n    return (\n        <div>\n            {fieldsForUserForm.map((field, index) =>\n                <div\n                    key={index}\n                >\n                    {field}\n                </div>\n            )\n            }\n        </div>\n    )\n}\n\nexport default GenerateFields;","import GenerateFields from \"./inputAllFields\";\nimport Button from '@mui/material/Button';\nimport React, {useState} from \"react\";\nimport {Grid, Stack} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SendIcon from '@mui/icons-material/Send';\n\nfunction InputSheetUnit(props) {\n\n    const [formFillingErrors, setFormFillingErrors] = useState({});\n\n    function validateForm() {\n\n        if (props.userSubmittedInfo.size === 0) {\n            let unfilledFields = [...props.inputSheetFieldDetails.variable].sort();\n            let errors = {}\n            unfilledFields.forEach(function (unfilledField) {\n                    errors[unfilledField] = \"Please fill \" + unfilledField;\n                }\n            );\n            setFormFillingErrors(errors);\n            return false;\n        } else if ([...Object.keys(props.userSubmittedInfo)].length > 0) {\n\n            let reqdVars = [];\n            for (let i = 0; i < props.inputSheetFieldDetails.variable.length; i++) {\n                if (props.inputSheetFieldDetails.type[i] !== \"checkbox\") {\n                    reqdVars.push(props.inputSheetFieldDetails.variable[i])\n                }\n            }\n\n            let sortedReqdVars = [...reqdVars].sort();\n            let sortedFilledVars = [...Object.keys(props.userSubmittedInfo)].sort();\n            sortedFilledVars = sortedFilledVars.filter(x => props.userSubmittedInfo[x] !== \"\")\n\n            let unfilledFields = sortedReqdVars.filter(x => !sortedFilledVars.includes(x));\n\n            let errors = {}\n            unfilledFields.forEach(function (unfilledField) {\n                    errors[unfilledField] = \"Please fill \" + unfilledField;\n                }\n            );\n            setFormFillingErrors(errors);\n\n            if (unfilledFields.length === 0) {\n                return true;\n            }\n        }\n    }\n\n    function validateFormAndSubmit() {\n\n        if (validateForm()) {\n            props.sendSubmit();\n            console.log(props.infoLogContents);\n        }\n    }\n\n    return (\n        <div className=\"input-sheet-unit-divider\">\n            <form style={{\n                marginLeft: \"1vw\",\n            }}>\n                <div className=\"in-form-fields\">\n                    <fieldset>\n                        {(props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\"))}\n                        <GenerateFields userSubmittedInfo={props.userSubmittedInfo}\n                                        setUserSubmittedInfo={props.setUserSubmittedInfo}\n                                        updateUserSubmittedInfo={props.updateUserSubmittedInfo}\n                                        inputSheetFieldDetails={props.inputSheetFieldDetails}\n                                        validateForm={validateForm}\n                                        formFillingErrors={formFillingErrors}\n                        />\n\n                        {\n                            (props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"SUCCESSFULSEND\")) &&\n                            <div>\n                                <h2 style={{color: \"green\"}}>Successfully posted!</h2>\n                            </div>\n                        }\n                    </fieldset>\n                </div>\n            </form>\n            <form>\n                <div className=\"in-form-buttons\">\n                    {\n                        (props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\")) &&\n                        <Grid container\n                              spacing={0}\n                              direction=\"column\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                        >\n                            <Grid item xs={2}>\n                                <Stack direction=\"row\" spacing={2} style={{textAlign: 'center'}}>\n                                    <Button style={{\n                                        borderRadius: 35,\n                                        backgroundColor: \"green\",\n                                        padding: \"18px 36px\",\n                                        fontSize: \"18px\",\n                                        width: \"15vw\"\n                                    }} variant=\"contained\"\n                                            onClick={validateFormAndSubmit} startIcon={<SendIcon/>}> Submit</Button>\n                                    <Button style={{\n                                        borderRadius: 35,\n                                        backgroundColor: \"red\",\n                                        padding: \"18px 36px\",\n                                        fontSize: \"18px\",\n                                        width: \"15vw\"\n                                    }} variant=\"contained\" color=\"error\"\n                                            onClick={props.sendCancel} startIcon={<DeleteIcon/>}> Cancel</Button>\n                                </Stack>\n                            </Grid>\n                        </Grid>\n\n                    }\n                    {\n                        !(props.inputSheetFieldDetails && (props.inputSheetFieldDetails.action === \"REQUEST\")) &&\n                        <div>\n                            <p style={{color: \"white\"}}>No active requests.</p>\n                        </div>\n                    }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default InputSheetUnit;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport InfoLogUnit from \"./components/infoLogUnit\";\nimport InputSheetUnit from \"./components/inputSheetUnit\";\nimport LinkIcon from '@mui/icons-material/Link';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\nimport {Tooltip} from \"@material-ui/core\";\n\nfunction genTimeStamp() {\n    let today = new Date();\n    let timestamp = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + \"_\" +\n        today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    return timestamp;\n}\n\nfunction App() {\n    const [vsmConnectionStatus, setVsmConnectionStatus] = useState(false);\n    let webSocket = new WebSocket('ws://' + document.location.host + '/ws');\n    const [infoLogContents, setInfoLogContents] = useState({\n        \"1\": [\"This\"],\n        \"2\": [\"This\"],\n        \"3\": [\"This\"],\n        \"4\": [\"This\"],\n        \"5\": [\"This\"],\n        \"6\": [\"This\"],\n        \"7\": [\"This\"],\n        \"8\": [\"This\"],\n        \"9\": [\"This\"],\n        \"10\": [\"This\"],\n        \"11\": [\"This\"],\n        \"12\": [\"This\"],\n    });\n    const [informContent, setInformContent] = useState(\"\");\n    const [inputSheetFieldDetails, setInputSheetFieldDetails] = useState();\n    const [collapseDevToolComp, setCollapseDevToolComp] = useState(true);\n    const [vsmVarsForDevToolComp, setVsmVarsForDevToolComp] = useState({});\n    const [userSubmittedInfo, setUserSubmittedInfo] = useState({});\n    // let aliveTimer = null;\n\n\n    const updateUserSubmittedInfo = (k, v) => {\n        let items = {...userSubmittedInfo};\n        items[k] = v;\n        setUserSubmittedInfo(items);\n    }\n\n\n    const setupWebSocketForGUI = () => {\n        let ws = webSocket;\n\n        ws.onopen = function () {\n            setVsmConnectionStatus(true);\n            clientAliveMessage();\n            console.log(\"Connection initiated by server.\")\n        };\n\n        ws.onclose = function (msg) {\n            setVsmConnectionStatus(false);\n            setInfoLogContents({});\n            setUserSubmittedInfo({});\n            setInputSheetFieldDetails({});\n            setInformContent(\"\");\n            let err_msg = \"VSM is not in 'play' state anymore. Please press 'play' in VSM and refresh the page.\";\n            console.log(err_msg);\n            setInformContent(err_msg);\n        };\n\n        ws.onmessage = function (msg) {\n            const parts = msg.data.split('#');\n            const command = parts[1];\n            if (command === \"REQUEST\") {\n                let newInputSheetFieldDetails = {\n                    action: command,\n                    variable: parts[3].split(';'),\n                    options: parts[4].split(';'),\n                    type: parts[5].split(';'),\n                    timestamp: parts[2]\n                };\n                // console.log(newInputSheetFieldDetails);\n                setInputSheetFieldDetails(newInputSheetFieldDetails);\n                let newObj = newInputSheetFieldDetails.variable.reduce((obj, key) => ({...obj, [key]: \"\"}), {})\n                setUserSubmittedInfo(newObj);\n            } else if (command === \"INFORM\") {\n                let currTS = genTimeStamp();\n                let newInfo = {};\n                newInfo[currTS] = [parts[4]];\n                setInformContent(parts[4]);\n                // console.log(infoLogContents);\n                setInfoLogContents(Object.assign(infoLogContents, newInfo));\n            } else if (command === \"UPDATE\") {\n                let variable = parts[2];\n                let val = parts[3];\n                let newVarVal = {}\n                newVarVal[variable] = [val];\n                setVsmVarsForDevToolComp(Object.assign(vsmVarsForDevToolComp, newVarVal));\n            } else {\n                console.log(\"Unknown command: \" + command + \"c\")\n            }\n            setVsmConnectionStatus(true);\n        };\n        document.title = \"VSM StudyMaster\";\n        const link = document.querySelector(\"link[rel*='icon']\") || document.createElement('link');\n        link.type = 'image/x-icon';\n        link.rel = 'shortcut icon';\n        link.href = 'http://scenemaker.dfki.de/images/scenemaker/logo.png';\n        document.getElementsByTagName('head')[0].appendChild(link);\n    }\n\n    useEffect(() => {\n        setupWebSocketForGUI();\n        // eslint-disable-next-line\n    }, []);\n\n\n    /**\n     * Message from client (this and webpage loading this) that client is alive\n     */\n    function clientAliveMessage() {\n        // console.log(\"Send client alive message to server\");\n        if (webSocket.readyState === WebSocket.OPEN) {\n            webSocket.send(`VSMMessage#STATUS#alive`);\n            setTimeout(clientAliveMessage, 100);\n        }\n\n    }\n\n    function sendSubmitToVsm() {\n        // console.log(userSubmittedInfo);\n\n        for (let i = 0; i < inputSheetFieldDetails.variable.length; i++) {\n            let variable = inputSheetFieldDetails.variable[i];\n            if (inputSheetFieldDetails.type[i] === \"radio\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"text\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"number\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"checkbox\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    webSocket.send(`VSMMessage#VAR#${variable}#${userSubmittedInfo[variable]}`);\n                }\n            }\n        }\n\n        webSocket.send(`VSMMessage#VAR#request_result#SUBMIT`);\n        setInputSheetFieldDetails({\n            action: \"SUCCESSFULSEND\",\n            timestamp: inputSheetFieldDetails.timestamp,\n        })\n        setUserSubmittedInfo(new Map());\n    }\n\n    function sendCancelToVsm() {\n        webSocket.send(`VSMMessage#VAR#request_result#CANCEL`);\n        console.log(\"Cancelling\");\n        for (let i = 0; i < inputSheetFieldDetails.variable.length; i++) {\n            let variable = inputSheetFieldDetails.variable[i];\n            if (inputSheetFieldDetails.type[i] === \"radio\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    updateUserSubmittedInfo(variable, \"\");\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"text\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    updateUserSubmittedInfo(variable, \"\");\n\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"number\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    updateUserSubmittedInfo(variable, \"\");\n\n                }\n            } else if (inputSheetFieldDetails.type[i] === \"checkbox\") {\n                if (userSubmittedInfo.hasOwnProperty(variable)) {\n                    let values = inputSheetFieldDetails.options[i].split(',');\n                    updateUserSubmittedInfo(variable, values.reduce((a, v) => ({...a, [v]: false}), {}));\n\n                }\n            }\n        }\n\n        // window.location.reload();\n    }\n\n\n    return (\n        <div className=\"App\">\n            <div className={collapseDevToolComp ? \"wrapper-collapsed\" : \"wrapper\"}>\n                <div className=\"header box\">\n                    <div className=\"flex-container\">\n\n                        <div className=\"item1\">\n                            <h1>Studymaster</h1>\n                        </div>\n                        <div className=\"item2\">\n                            {vsmConnectionStatus ?\n                                <Tooltip disableFocusListener title=\"VSM connected\">\n                                    <LinkIcon style={{fill: \"green\", fontSize: 50}}/>\n                                </Tooltip> :\n                                <Tooltip disableFocusListener title=\"VSM not connected\">\n                                    <LinkOffIcon style={{fill: \"red\", fontSize: 50}}/>\n                                </Tooltip>\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"sidebar box\">\n                    <InfoLogUnit vsmVars={vsmVarsForDevToolComp}\n                                 collapseDevToolComp={collapseDevToolComp}\n                                 setCollapseDevToolComp={setCollapseDevToolComp}\n                                 infoLogContents={infoLogContents}\n                    />\n                </div>\n\n                <div className=\"inform box\">\n                    <div className=\"\">\n                        <h2>{informContent}</h2>\n                    </div>\n                </div>\n\n                <div className=\"content box\">\n                    <InputSheetUnit inputSheetFieldDetails={inputSheetFieldDetails}\n                                    setUserSubmittedInfo={setUserSubmittedInfo}\n                                    updateUserSubmittedInfo={updateUserSubmittedInfo}\n                                    sendSubmit={sendSubmitToVsm} sendCancel={sendCancelToVsm}\n                                    userSubmittedInfo={userSubmittedInfo}\n                                    infoLogContents={infoLogContents}\n                    />\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}