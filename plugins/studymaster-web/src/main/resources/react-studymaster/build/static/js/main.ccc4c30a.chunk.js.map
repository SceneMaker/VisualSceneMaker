{
  "version": 3,
  "sources": [
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "App",
    "useState",
    "setConnectionStatusText",
    "proto",
    "document",
    "location",
    "protocol",
    "WebSocket",
    "host",
    "webSocket",
    "setWebSocket",
    "formContents",
    "setFormContents",
    "inputValue",
    "Map",
    "generateInputFieldWithType",
    "i",
    "variable",
    "type",
    "name",
    "placeholder",
    "options",
    "id",
    "onChange",
    "e",
    "set",
    "target",
    "value",
    "values",
    "split",
    "map",
    "option",
    "useEffect",
    "ws",
    "onopen",
    "onclose",
    "onmessage",
    "msg",
    "console",
    "log",
    "data",
    "parts",
    "command",
    "action",
    "timestamp",
    "className",
    "returnValue",
    "length",
    "inputBoxes",
    "push",
    "generateFields",
    "onClick",
    "preventDefault",
    "allFieldsSet",
    "j",
    "radio_checked",
    "getElementById",
    "checked",
    "alert",
    "has",
    "send",
    "get",
    "extractAndSendUserInput",
    "window",
    "reload",
    "undefined",
    "Boolean",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister"
  ],
  "mappings": "iNAuOeA,MAnOf,WAAgB,IAAD,EAC6CC,mBAAS,IADtD,mBACkBC,GADlB,WAELC,EAAuC,WAA/BC,SAASC,SAASC,SAAuB,SAAS,QAFrD,EAGuBL,mBAAS,IAAIM,UAAUJ,EAAQC,SAASC,SAASG,KAAO,QAH/E,mBAGJC,EAHI,KAGOC,EAHP,OAI6BT,qBAJ7B,mBAIJU,EAJI,KAIUC,EAJV,KAKLC,EAAa,IAAIC,IA2HvB,SAASC,EAA2BC,GAChC,IAAIC,EAAWN,EAAaM,SAASD,GACrC,GAA6B,SAAzBL,EAAaO,KAAKF,GAClB,OACI,mCACI,8BACI,sCAASL,EAAaM,SAASD,GAA/B,OACA,uBAAOE,KAAK,OAAOC,KAAMF,EAAUG,YAAaT,EAAaU,QAAQL,GAAIM,GAAIL,EACtEM,SAAU,SAAAC,GAAC,OAAIX,EAAWY,IAAIR,EAAUO,EAAEE,OAAOC,eAIjE,GAA6B,WAAzBhB,EAAaO,KAAKF,GACzB,OACI,mCACI,8BACI,sCAASL,EAAaM,SAASD,GAA/B,OACA,uBAAOE,KAAK,SAASC,KAAMF,EAAUG,YAAaT,EAAaU,QAAQL,GAAIM,GAAIL,EACxEM,SAAU,SAAAC,GAAC,OAAIX,EAAWY,IAAIR,EAAUO,EAAEE,OAAOC,eAIjE,GAA6B,UAAzBhB,EAAaO,KAAKF,GAAgB,CACzC,IAAIY,EAASjB,EAAaU,QAAQL,GAAGa,MAAM,KAC3C,OACI,mCACI,8BACI,sCAASlB,EAAaM,SAASD,GAA/B,OACCY,EAAOE,KAAI,SAACC,GAAD,OACR,qCACI,uBAAOb,KAAK,QAAQI,GAAIS,EAAQZ,KAAMF,EAAUU,MAAOI,IACvD,sCAASA,EAAT,kBAMjB,MAA6B,aAAzBpB,EAAaO,KAAKF,GAErB,mCACI,8BACI,sCAASL,EAAaM,SAASD,GAA/B,OACA,uBAAOE,KAAK,WAAWI,GAAIL,EAAUE,KAAMF,EAAUU,MAAOhB,EAAaU,QAAQL,KACjF,sCAASL,EAAaU,QAAQL,GAA9B,iBANT,EA8BX,OA7LAgB,qBAAU,WACN,IAAIC,EAAK,IAAI1B,UAAUJ,EAAQC,SAASC,SAASG,KAAO,OAExDN,EAAwB,iBACxB+B,EAAGC,OAAS,WACRhC,EAAwB,eAE5B+B,EAAGE,QAAU,WACTjC,EAAwB,oBAE5B+B,EAAGG,UAAY,SAAUC,GACrBC,QAAQC,IAAIF,EAAIG,MAChB,IAAMC,EAAQJ,EAAIG,KAAKX,MAAM,KACvBa,EAAUD,EAAM,GACN,YAAZC,GACA9B,EAAgB,CACZ+B,OAAQD,EACRzB,SAAUwB,EAAM,GAAGZ,MAAM,KACzBR,QAASoB,EAAM,GAAGZ,MAAM,KACxBX,KAAMuB,EAAM,GAAGZ,MAAM,KACrBe,UAAWH,EAAM,KAGzBvC,EAAwBmC,EAAIG,OAEhC9B,EAAauB,KACd,IAoKC,qBAAKY,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,iCACI,qCACMlC,GAAyC,YAAxBA,EAAagC,QArBpD,WACI,IAEI3B,EAFA8B,EAAc,GAGlB,IAAK9B,EAAI,EAAGA,EAAIL,EAAaM,SAAS8B,OAAQ/B,IAAK,CAC/C,IAAIgC,EAAajC,EAA2BC,GAC5C8B,EAAYG,KAAKD,GAErB,OACI,mCACKF,IAWiEI,GAErDvC,GAAyC,mBAAxBA,EAAagC,QAC/B,8BACI,2DAKPhC,GAAyC,YAAxBA,EAAagC,QAC/B,gCACI,wBAAQQ,QAhLhC,SAAoB3B,IAuBpB,SAAiCA,GAC7BA,EAAE4B,iBACF,IACIpC,EADAqC,GAAe,EAEnB,IAAKrC,EAAI,EAAGA,EAAIL,EAAaM,SAAS8B,OAAQ/B,IAAK,CAC/C,IAAIC,EAAWN,EAAaM,SAASD,GACrC,GAA6B,UAAzBL,EAAaO,KAAKF,GAAgB,CAClC,IAAIsC,OAAC,EACD1B,EAASjB,EAAaU,QAAQL,GAAGa,MAAM,KACvC0B,GAAgB,EACpB,IAAKD,EAAI,EAAGA,EAAI1B,EAAOmB,OAAQO,IAAK,CAChC,IAAI3B,EAAQC,EAAO0B,GACIlD,SAASoD,eAAe7B,GAC1B8B,UACjBF,GAAgB,GAGnBA,IACDG,MAAM,4CAA8C/C,EAAaM,SAASD,IAC1EqC,GAAe,OAEa,SAAzB1C,EAAaO,KAAKF,GACpBH,EAAW8C,IAAI1C,KAChByC,MAAM,2CAA6C/C,EAAaM,SAASD,IACzEqC,GAAe,GAEa,WAAzB1C,EAAaO,KAAKF,KACpBH,EAAW8C,IAAI1C,KAChByC,MAAM,6CAA+C/C,EAAaM,SAASD,IAC3EqC,GAAe,IAK3B,GAAIA,EACA,IAAKrC,EAAI,EAAGA,EAAIL,EAAaM,SAAS8B,OAAQ/B,IAAK,CAC/C,IAAIC,EAAWN,EAAaM,SAASD,GACrC,GAA6B,UAAzBL,EAAaO,KAAKF,GAAgB,CAElC,IAAIsC,OAAC,EACD1B,EAASjB,EAAaU,QAAQL,GAAGa,MAAM,KAC3C,IAAKyB,EAAI,EAAGA,EAAI1B,EAAOmB,OAAQO,IAAK,CAChC,IAAI3B,EAAQC,EAAO0B,GACIlD,SAASoD,eAAe7B,GAC1B8B,SACjBhD,EAAUmD,KAAV,yBAAiC3C,EAAjC,YAA6CU,SAGrB,SAAzBhB,EAAaO,KAAKF,IAIO,WAAzBL,EAAaO,KAAKF,GAHrBH,EAAW8C,IAAI1C,IACfR,EAAUmD,KAAV,yBAAiC3C,EAAjC,YAA6CJ,EAAWgD,IAAI5C,KAMhC,aAAzBN,EAAaO,KAAKF,KACrBZ,SAASoD,eAAevC,GAAUwC,QAClChD,EAAUmD,KAAV,yBAAiC3C,EAAjC,UAEAR,EAAUmD,KAAV,yBAAiC3C,EAAjC,YAMhB,OAAOoC,GAxFWS,CAAwBtC,IAGtCf,EAAUmD,KAAV,wCACAhD,EAAgB,CACZ+B,OAAQ,iBACRC,UAAWjC,EAAaiC,aAG5BmB,OAAO1D,SAAS2D,UAsKA,qBACA,wBAAQb,QAnKhC,WACI1C,EAAUmD,KAAV,wCAGAhD,OAAgBqD,IA+JI,0BAIFtD,GAAyC,YAAxBA,EAAagC,SAChC,8BACI,+DClNRuB,QACa,cAA7BH,OAAO1D,SAAS8D,UAEa,UAA7BJ,OAAO1D,SAAS8D,UAEhBJ,OAAO1D,SAAS8D,SAASC,MACrB,2DCbRC,IAASC,OAAO,cAAE,EAAF,IAAUlE,SAASoD,eAAe,SD8H1C,kBAAmBe,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,iB",
  "file": "static/js/main.ccc4c30a.chunk.js",
  "sourcesContent": [
    "import React, {useEffect, useState} from 'react';\nimport './App.css';\n\n\nfunction App() {\n    const [connectionStatusText, setConnectionStatusText] = useState(\"\");\n    const proto = document.location.protocol === 'https:'? 'wss://':'ws://';\n    const [webSocket, setWebSocket] = useState(new WebSocket(proto + document.location.host + '/ws'));\n    const [formContents, setFormContents] = useState();\n    const inputValue = new Map();\n    useEffect(() => {\n        let ws = new WebSocket(proto + document.location.host + '/ws');\n\n        setConnectionStatusText('Connecting...');\n        ws.onopen = function () {\n            setConnectionStatusText('Connected!');\n        };\n        ws.onclose = function () {\n            setConnectionStatusText('Lost connection');\n        };\n        ws.onmessage = function (msg) {\n            console.log(msg.data);\n            const parts = msg.data.split('#');\n            const command = parts[1];\n            if (command === \"REQUEST\") {\n                setFormContents({\n                    action: command,\n                    variable: parts[3].split(';'),\n                    options: parts[4].split(';'),\n                    type: parts[5].split(';'),\n                    timestamp: parts[2]\n                })\n            }\n            setConnectionStatusText(msg.data);\n        };\n        setWebSocket(ws);\n    }, []);\n\n\n    function sendSubmit(e) {\n        let allFieldSet = extractAndSendUserInput(e);\n\n        if (allFieldSet) {\n            webSocket.send(`VSMMessage#VAR#request_result#SUBMIT`);\n            setFormContents({\n                action: \"SUCCESSFULSEND\",\n                timestamp: formContents.timestamp,\n            })\n        } else {\n            window.location.reload();\n        }\n    }\n\n    function sendCancel() {\n        webSocket.send(`VSMMessage#VAR#request_result#CANCEL`);\n\n        // Resetting form to empty\n        setFormContents(undefined);\n    }\n\n    // If submit or cancel button is being pushed:\n    // Send all variables with the selected/ written value from user input.\n    function extractAndSendUserInput(e) {\n        e.preventDefault();\n        let allFieldsSet = true;\n        let i;\n        for (i = 0; i < formContents.variable.length; i++) {\n            let variable = formContents.variable[i];\n            if (formContents.type[i] === \"radio\") {\n                let j;\n                let values = formContents.options[i].split(',');\n                let radio_checked = false;\n                for (j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    let radioButtonValue = document.getElementById(value);\n                    if (radioButtonValue.checked) {\n                        radio_checked = true;\n                    }\n                }\n                if (!radio_checked) {\n                    alert(\"Please ensure to fill in radio input for \" + formContents.variable[i]);\n                    allFieldsSet = false;\n                }\n            } else if (formContents.type[i] === \"text\") {\n                if (!inputValue.has(variable)) {\n                    alert(\"Please ensure to fill in text input for \" + formContents.variable[i]);\n                    allFieldsSet = false;\n                }\n            } else if (formContents.type[i] === \"number\") {\n                if (!inputValue.has(variable)) {\n                    alert(\"Please ensure to fill in number input for \" + formContents.variable[i]);\n                    allFieldsSet = false;\n                }\n            }\n        }\n\n        if (allFieldsSet) {\n            for (i = 0; i < formContents.variable.length; i++) {\n                let variable = formContents.variable[i];\n                if (formContents.type[i] === \"radio\") {\n\n                    let j;\n                    let values = formContents.options[i].split(',');\n                    for (j = 0; j < values.length; j++) {\n                        let value = values[j];\n                        let radioButtonValue = document.getElementById(value);\n                        if (radioButtonValue.checked) {\n                            webSocket.send(`VSMMessage#VAR#${variable}#${value}`);\n                        }\n                    }\n                } else if (formContents.type[i] === \"text\") {\n                    if (inputValue.has(variable)) {\n                        webSocket.send(`VSMMessage#VAR#${variable}#${inputValue.get(variable)}`);\n                    }\n                } else if (formContents.type[i] === \"number\") {\n                    if (inputValue.has(variable)) {\n                        webSocket.send(`VSMMessage#VAR#${variable}#${inputValue.get(variable)}`);\n                    }\n                } else if (formContents.type[i] === \"checkbox\") {\n                    if (document.getElementById(variable).checked) {\n                        webSocket.send(`VSMMessage#VAR#${variable}#true`);\n                    } else {\n                        webSocket.send(`VSMMessage#VAR#${variable}#false`);\n                    }\n                }\n            }\n        }\n\n        return allFieldsSet\n    }\n\n\n    function generateInputFieldWithType(i) {\n        let variable = formContents.variable[i];\n        if (formContents.type[i] === \"text\") {\n            return (\n                <>\n                    <p>\n                        <label> {formContents.variable[i]} </label>\n                        <input type=\"text\" name={variable} placeholder={formContents.options[i]} id={variable}\n                               onChange={e => inputValue.set(variable, e.target.value)}/>\n                    </p>\n                </>\n            )\n        } else if (formContents.type[i] === \"number\") {\n            return (\n                <>\n                    <p>\n                        <label> {formContents.variable[i]} </label>\n                        <input type=\"number\" name={variable} placeholder={formContents.options[i]} id={variable}\n                               onChange={e => inputValue.set(variable, e.target.value)}/>\n                    </p>\n                </>\n            )\n        } else if (formContents.type[i] === \"radio\") {\n            let values = formContents.options[i].split(',');\n            return (\n                <>\n                    <p>\n                        <label> {formContents.variable[i]} </label>\n                        {values.map((option) =>\n                            <>\n                                <input type=\"radio\" id={option} name={variable} value={option}/>\n                                <label> {option} </label>\n                            </>\n                        )}\n                    </p>\n                </>\n            )\n        } else if (formContents.type[i] === \"checkbox\") {\n            return (\n                <>\n                    <p>\n                        <label> {formContents.variable[i]} </label>\n                        <input type=\"checkbox\" id={variable} name={variable} value={formContents.options[i]}/>\n                        <label> {formContents.options[i]} </label>\n                    </p>\n                </>\n            )\n        }\n    }\n\n\n    function generateFields() {\n        let returnValue = [];\n\n        let i;\n        for (i = 0; i < formContents.variable.length; i++) {\n            let inputBoxes = generateInputFieldWithType(i);\n            returnValue.push(inputBoxes);\n        }\n        return (\n            <>\n                {returnValue}\n            </>\n        )\n    }\n\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <form>\n                    <fieldset>\n                        {(formContents && (formContents.action === \"REQUEST\")) && generateFields()}\n                        {\n                            (formContents && (formContents.action === \"SUCCESSFULSEND\")) &&\n                            <div>\n                                <h2>Successfully posted!</h2>\n                            </div>\n                        }\n                    </fieldset>\n                    {\n                        (formContents && (formContents.action === \"REQUEST\")) &&\n                        <div>\n                            <button onClick={sendSubmit}> submit</button>\n                            <button onClick={sendCancel}> cancel</button>\n                        </div>\n                    }\n                    {\n                        !(formContents && (formContents.action === \"REQUEST\")) &&\n                        <div>\n                            <h2>No active requests.</h2>\n                        </div>\n                    }\n                </form>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n",
    "import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}